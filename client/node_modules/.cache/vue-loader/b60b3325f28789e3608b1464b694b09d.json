{"remainingRequest":"C:\\Users\\nuno_\\Desktop\\vuetify-material-dashboard-v1.0.0\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\nuno_\\Desktop\\vuetify-material-dashboard-v1.0.0\\src\\views\\ManageLibrary.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\nuno_\\Desktop\\vuetify-material-dashboard-v1.0.0\\src\\views\\ManageLibrary.vue","mtime":1546622528478},{"path":"C:\\Users\\nuno_\\Desktop\\vuetify-material-dashboard-v1.0.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\nuno_\\Desktop\\vuetify-material-dashboard-v1.0.0\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\nuno_\\Desktop\\vuetify-material-dashboard-v1.0.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\nuno_\\Desktop\\vuetify-material-dashboard-v1.0.0\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport LibraryService from '@/services/LibraryService'\nimport {\n  mapState\n} from 'vuex'\nexport default {\n  computed: {\n    ...mapState([\n      'user'\n    ])\n  },\n  data() {\n    return {\n      invitation: {\n        email: null\n      },\n      error: null,\n      dialog: false,\n      required: (value) => !!value || 'Required.'\n    }\n  },\n  methods: {\n    async invite() {\n      try {\n        this.error = null\n        const areAllFieldsFilledIn = Object\n          .keys(this.invitation)\n          .every(key => !!this.invitation[key])\n        if (!areAllFieldsFilledIn) {\n          this.error = 'Please fill all the required fields'\n          this.dialog = false\n          return\n        }\n        const response = await LibraryService.invite({\n          usernameInviter: this.$store.state.user.username,\n          emailInvited: this.invitation.email,\n          libraryId: this.$store.state.library.id\n        })\n\n        // this.$store.dispatch('setLibrary', response.data)\n        // this.$store.dispatch('setHasLibrary', true)\n        alert(response.data.message)\n        this.dialog = false\n\n        // this.$router.push({\n        //   name: 'dashboard'\n        // })\n\n      } catch (error) {\n        alert(error)\n        alert('Some error happened. Please try again.')\n        this.dialog = false\n      }\n    }\n  }\n}\n",{"version":3,"sources":["ManageLibrary.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ManageLibrary.vue","sourceRoot":"src\\views","sourcesContent":["<script>\n/*eslint-disable */\n</script>\n\n<template>\n  <v-container fill-height fluid grid-list-xl>\n    <v-layout justify-center wrap>\n      <v-flex xs12 md8>\n        <material-card color=\"green\" title=\"Manage Library\">\n          <v-form>\n            <v-container py-0>\n              <v-layout wrap>\n                <v-flex xs12 md12>\n                  <h4>Library: {{$store.state.library.name}} </h4>\n                  <v-btn dark class=\"cyan\" @click=\"dialog = true\">\n                    Invite someone\n                  </v-btn>\n                </v-flex>\n                <v-flex xs12 text-xs-right>\n                </v-flex>\n              </v-layout>\n              <v-layout row justify-center>\n                <v-dialog v-model=\"dialog\" persistent max-width=\"600px\">\n                  <v-card>\n                    <v-card-title>\n                      <span class=\"headline\">Invite someone to {{$store.state.library.name}}</span>\n                    </v-card-title>\n                    <v-card-text>\n                      <v-container grid-list-md>\n                        <v-layout wrap>\n                          <v-flex xs12>\n                            <v-text-field label=\"Email\" required :rules=\"[required]\" v-model=\"invitation.email\"></v-text-field>\n                          </v-flex>\n                        </v-layout>\n                      </v-container>\n                    </v-card-text>\n                    <v-card-actions>\n                      <v-spacer></v-spacer>\n                      <v-btn color=\"blue darken-1\" flat @click=\"dialog = false\">Close</v-btn>\n                      <v-btn color=\"blue darken-1\" flat @click=\"invite\">Save</v-btn>\n                    </v-card-actions>\n                  </v-card>\n                </v-dialog>\n              </v-layout>\n            </v-container>\n          </v-form>\n        </material-card>\n      </v-flex>\n    </v-layout>\n  </v-container>\n</template>\n\n<script>\n  import LibraryService from '@/services/LibraryService'\n  import {\n    mapState\n  } from 'vuex'\n  export default {\n    computed: {\n      ...mapState([\n        'user'\n      ])\n    },\n    data() {\n      return {\n        invitation: {\n          email: null\n        },\n        error: null,\n        dialog: false,\n        required: (value) => !!value || 'Required.'\n      }\n    },\n    methods: {\n      async invite() {\n        try {\n          this.error = null\n          const areAllFieldsFilledIn = Object\n            .keys(this.invitation)\n            .every(key => !!this.invitation[key])\n          if (!areAllFieldsFilledIn) {\n            this.error = 'Please fill all the required fields'\n            this.dialog = false\n            return\n          }\n          const response = await LibraryService.invite({\n            usernameInviter: this.$store.state.user.username,\n            emailInvited: this.invitation.email,\n            libraryId: this.$store.state.library.id\n          })\n  \n          // this.$store.dispatch('setLibrary', response.data)\n          // this.$store.dispatch('setHasLibrary', true)\n          alert(response.data.message)\n          this.dialog = false\n  \n          // this.$router.push({\n          //   name: 'dashboard'\n          // })\n  \n        } catch (error) {\n          alert(error)\n          alert('Some error happened. Please try again.')\n          this.dialog = false\n        }\n      }\n    }\n  }\n</script>\n"]}]}