{"remainingRequest":"C:\\Users\\nuno_\\Desktop\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\nuno_\\Desktop\\client\\src\\views\\Login.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\nuno_\\Desktop\\client\\src\\views\\Login.vue","mtime":1546574239452},{"path":"C:\\Users\\nuno_\\Desktop\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\nuno_\\Desktop\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\nuno_\\Desktop\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\nuno_\\Desktop\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport AuthenticationService from '@/services/AuthenticationService'\nexport default {\n  data() {\n      return {\n        username: '',\n        password: '',\n        error: null,\n        success: null,\n        required: (value) => !!value || 'Required.'\n      }\n    },\n  methods: {\n      async login() {\n        try {\n          this.error = null\n          const response = await AuthenticationService.login({\n            username: this.username,\n            password: this.password\n          })\n          const userid = response.data.user.id\n          this.success = 'Logged in successfully.'\n          this.$store.dispatch('setToken', response.data.token)\n          this.$store.dispatch('setUser', response.data.user)\n          if(response.data.userHasLibrary){\n          this.$store.dispatch('setHasLibrary', true)\n          this.$store.dispatch('setLibrary', response.data.library)\n          } else if(response.data.userIsPartOfLibrary) {\n          this.$store.dispatch('setIsPartOfLibrary', true)\n          this.$store.dispatch('setLibrary', response.data.library)\n          }else{\n          this.$store.dispatch('setHasLibrary', false)  \n          this.$store.dispatch('setIsPartOfLibrary', false) \n          }\n          \n          this.$router.push({\n            path: '/dashboard'\n          })\n        } catch (error) {\n          this.success = null\n          this.error = error.response.data.error\n        }\n        // try {\n        //   const userHasLibrary = (await LibraryService.checkHasLibrary({\n        //       userId: userid\n        //     })).data\n        //   alert(userHasLibrary)\n        // }catch (err){\n        //   alert(err)\n        // }\n      }\n    },\n    async mounted () {\n      this.$store.dispatch('setToken', null)\n      this.$store.dispatch('setUser', null)\n      this.$store.dispatch('setHasLibrary', null)\n      this.$store.dispatch('setIsPartOfLibrary', null)\n      this.$store.dispatch('setLibrary', null)\n    }\n}\n",{"version":3,"sources":["Login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Login.vue","sourceRoot":"src\\views","sourcesContent":["<script>/*eslint-disable */ </script>\n<template>\n  <v-container fill-height fluid grid-list-xl>\n    <v-layout justify-center wrap>\n      <v-flex xs12 md8>\n        <material-card color=\"green\" title=\"Login\">\n          <v-form>\n            <v-container py-0>\n              <v-layout wrap>\n                <v-flex xs12 md12>\n                  <v-text-field label=\"Username\" required :rules=\"[required]\" v-model=\"username\" class='purple-input' ></v-text-field>\n                </v-flex>\n                <v-flex xs12 md12>\n                <v-text-field label=\"Password\" required :rules=\"[required]\" type=\"password\" v-model=\"password\" class='purple-input' ></v-text-field>\n                </v-flex>\n                <v-alert v-if=\"success\" :value=\"true\" type=\"success\">\n                  {{success}}.\n                </v-alert>\n                <v-alert  v-if=\"error\" :value=\"true\" type=\"error\">\n                 {{error}}\n                </v-alert>\n                <v-flex xs12 text-xs-right>\n                  <v-btn class=\"mx-0 font-weight-light\" @click=\"login\" color=\"success\">\n                    Login\n                  </v-btn>\n                </v-flex>\n              </v-layout>\n            </v-container>\n          </v-form>\n        </material-card>\n      </v-flex>\n    </v-layout>\n  </v-container>\n</template>\n\n<script>\nimport AuthenticationService from '@/services/AuthenticationService'\nexport default {\n  data() {\n      return {\n        username: '',\n        password: '',\n        error: null,\n        success: null,\n        required: (value) => !!value || 'Required.'\n      }\n    },\n  methods: {\n      async login() {\n        try {\n          this.error = null\n          const response = await AuthenticationService.login({\n            username: this.username,\n            password: this.password\n          })\n          const userid = response.data.user.id\n          this.success = 'Logged in successfully.'\n          this.$store.dispatch('setToken', response.data.token)\n          this.$store.dispatch('setUser', response.data.user)\n          if(response.data.userHasLibrary){\n          this.$store.dispatch('setHasLibrary', true)\n          this.$store.dispatch('setLibrary', response.data.library)\n          } else if(response.data.userIsPartOfLibrary) {\n          this.$store.dispatch('setIsPartOfLibrary', true)\n          this.$store.dispatch('setLibrary', response.data.library)\n          }else{\n          this.$store.dispatch('setHasLibrary', false)  \n          this.$store.dispatch('setIsPartOfLibrary', false) \n          }\n          \n          this.$router.push({\n            path: '/dashboard'\n          })\n        } catch (error) {\n          this.success = null\n          this.error = error.response.data.error\n        }\n        // try {\n        //   const userHasLibrary = (await LibraryService.checkHasLibrary({\n        //       userId: userid\n        //     })).data\n        //   alert(userHasLibrary)\n        // }catch (err){\n        //   alert(err)\n        // }\n      }\n    },\n    async mounted () {\n      this.$store.dispatch('setToken', null)\n      this.$store.dispatch('setUser', null)\n      this.$store.dispatch('setHasLibrary', null)\n      this.$store.dispatch('setIsPartOfLibrary', null)\n      this.$store.dispatch('setLibrary', null)\n    }\n}\n</script>\n"]}]}