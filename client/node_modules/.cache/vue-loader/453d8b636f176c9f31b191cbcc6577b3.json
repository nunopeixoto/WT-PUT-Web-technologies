{"remainingRequest":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\nuno_\\Desktop\\q1w2\\client\\src\\views\\ManageLibrary.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\src\\views\\ManageLibrary.vue","mtime":1548156698904},{"path":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport LibraryService from '@/services/LibraryService'\nimport AuthenticationService from '@/services/AuthenticationService'\n\nimport {\n  mapState\n} from 'vuex'\nexport default {\n  computed: {\n    ...mapState([\n      'user'\n    ])\n  },\n  data() {\n    return {\n      snackbar: false,\n      snackbarSuccess: false,\n      snackbarError: false,\n      color: null,\n      snackbarMessage : '',\n      invitation: {\n        email: null\n      },\n      error: null,\n      dialog: false,\n      dialogRemove: false,\n      required: (value) => !!value || 'Required.',\n      users: [],\n      search: '',\n      headers: [{\n          class: 'idcolumn',\n          sortable: true,\n          text: 'Id',\n          value: 'userId',\n        },\n        {\n          sortable: false,\n          text: 'Name',\n          value: 'name'\n        },\n        {\n          sortable: false,\n          text: 'Surname',\n          value: 'surname'\n        },\n        {\n          sortable: true,\n          text: 'Username',\n          value: 'username'\n        },\n        {\n          sortable: true,\n          text: 'E-mail',\n          value: 'email'\n        },\n        {\n          sortable: true,\n          text: 'Remove',\n          align: 'center'\n        }\n      ],\n    }\n  },\n  methods: {\n    async invite() {\n      try {\n        this.error = null\n        const areAllFieldsFilledIn = Object\n          .keys(this.invitation)\n          .every(key => !!this.invitation[key])\n        if (!areAllFieldsFilledIn) {\n          this.error = 'Please fill all the required fields'\n          return\n        }\n        const response = await LibraryService.invite({\n          usernameInviter: this.$store.state.user.username,\n          emailInvited: this.invitation.email,\n          libraryId: this.$store.state.library.id\n        })\n        this.color = \"success\"\n        this.snackbarError = false\n        this.snackbarSuccess = true\n        this.snackbarMessage = 'Invitation sent'\n        this.snackbar= true\n        this.dialog = false\n\n      } catch (error) {\n        alert('Some error happened. Please try again.')\n        this.color = \"error\"\n        this.snackbarSuccess = false\n        this.snackbarError = true\n        this.snackbarMessage = \"Some error happened. Please try again later.\"\n        this.snackbar= true\n        this.dialog = false\n      }\n    },\n    async deleteItem (item) {\n      const index = this.users.indexOf(item)\n\n      if (response) {\n        var r = confirm(`Are you sure you want to delete @${item.username} from your library?`) && this.users.splice(index, 1)\n        if (r) {\n          const response = (await LibraryService.removeUserFromLibrary(this.$store.state.library.id, item.userId)).data\n          this.color = \"success\"\n          this.snackbarError = false\n          this.snackbarSuccess = true\n          this.snackbarMessage = \"User deleted successfully.\"\n          this.snackbar= true\n        }\n      }\n    }\n  },\n  async mounted () {\n    const libraryInvitations = (await LibraryService.getAllLibraryInvitationsByLibraryId(this.$store.state.library.id)).data\n        for (var i = 0; i < libraryInvitations.length; i++) {\n          var obj=libraryInvitations[i]\n          const user = (await AuthenticationService.getUserById(obj.UserId)).data\n          this.users.push({\n            userId: user.id,\n            name: user.name,\n            surname: user.surname,\n            username: user.username,\n            birthDate: user.birthDate,\n            email: user.email\n          })\n         }\n    var x = document.getElementsByClassName(\"idcolumn\")\n    x[0].style.display = \"none\"\n  }\n}\n",{"version":3,"sources":["ManageLibrary.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6EA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ManageLibrary.vue","sourceRoot":"src\\views","sourcesContent":["<script>\n/*eslint-disable */\n</script>\n\n<template>\n  <v-container fill-height fluid grid-list-xl>\n    <v-layout justify-center wrap>\n      <v-snackbar :color=\"this.color\"  top v-model=\"snackbar\" dark>\n        <v-icon v-if=\"snackbarSuccess\" color=\"white\" class=\"mr-3\">mdi-check</v-icon>\n        <v-icon v-if=\"snackbarError\" color=\"white\" class=\"mr-3\">mdi-alert-circle</v-icon>\n        <div> {{this.snackbarMessage}}  </div>\n        <v-icon size=\"16\" @click=\"snackbar = false\">mdi-close-circle</v-icon>\n      </v-snackbar>\n      <v-flex xs12 md8>\n        <material-card color=\"green\" title=\"Manage Library\">\n          <v-form>\n            <v-container py-0>\n              <v-layout wrap>\n                  <v-spacer></v-spacer>\n                    <v-flex xs12 md3>\n                    <v-text-field v-model=\"search\" append-icon=\"search\" label=\"Search\" single-line hide-details></v-text-field>\n                    </v-flex> \n                    <v-flex xs12 md6></v-flex>\n                    <v-flex xs12 md3>\n                      <v-btn color=\"green\" dark class=\"mb-2\" @click=\"dialog = true\">\n                        Invite someone\n                      </v-btn>\n                    </v-flex>\n                    <v-flex xs12 md12>\n                      <v-data-table :headers=\"headers\" :items=\"users\" :search=\"search\">\n                        <template slot=\"headerCell\" slot-scope=\"{ header }\">\n                          <span class=\"font-weight-light text-warning text--darken-3\" v-text=\"header.text\" />\n                        </template>\n                        <template slot=\"items\" slot-scope=\"props\">\n                          <td style=\"display: none;\">\n                            {{ props.item.userId }}</td>\n                          <td>{{ props.item.name }}</td>\n                          <td>{{ props.item.surname }}</td>\n                          <td>{{ props.item.username }}</td>\n                          <td>{{ props.item.email }}</td>\n                          <td><center><v-icon @click=\"deleteItem(props.item)\">mdi-delete</v-icon></center></td>\n                        </template>  \n                      </v-data-table>\n                    </v-flex>\n              </v-layout>\n              <v-layout row justify-center>\n                <v-dialog v-model=\"dialog\" persistent max-width=\"600px\">\n                  <v-card>\n                    <v-card-title>\n                      <span class=\"headline\">Invite someone to {{$store.state.library.name}}</span>\n                    </v-card-title>\n                    <v-card-text>\n                      <v-container grid-list-md>\n                        <v-layout wrap>\n                          <v-flex xs12>\n                            <v-text-field label=\"Email\" required :rules=\"[required]\" v-model=\"invitation.email\"></v-text-field>\n                          </v-flex>\n                        </v-layout>\n                      </v-container>\n                    </v-card-text>\n                    <v-card-actions>\n                      <v-spacer></v-spacer>\n                      <v-btn color=\"blue darken-1\" flat @click=\"dialog = false\">Close</v-btn>\n                      <v-btn color=\"blue darken-1\" flat @click=\"invite\">Save</v-btn>\n                    </v-card-actions>\n                  </v-card>\n                </v-dialog>\n              </v-layout>\n            </v-container>   \n          </v-form>\n        </material-card>\n      </v-flex>\n    </v-layout>\n  </v-container>\n</template>\n\n<script>\n  import LibraryService from '@/services/LibraryService'\n  import AuthenticationService from '@/services/AuthenticationService'\n\n  import {\n    mapState\n  } from 'vuex'\n  export default {\n    computed: {\n      ...mapState([\n        'user'\n      ])\n    },\n    data() {\n      return {\n        snackbar: false,\n        snackbarSuccess: false,\n        snackbarError: false,\n        color: null,\n        snackbarMessage : '',\n        invitation: {\n          email: null\n        },\n        error: null,\n        dialog: false,\n        dialogRemove: false,\n        required: (value) => !!value || 'Required.',\n        users: [],\n        search: '',\n        headers: [{\n            class: 'idcolumn',\n            sortable: true,\n            text: 'Id',\n            value: 'userId',\n          },\n          {\n            sortable: false,\n            text: 'Name',\n            value: 'name'\n          },\n          {\n            sortable: false,\n            text: 'Surname',\n            value: 'surname'\n          },\n          {\n            sortable: true,\n            text: 'Username',\n            value: 'username'\n          },\n          {\n            sortable: true,\n            text: 'E-mail',\n            value: 'email'\n          },\n          {\n            sortable: true,\n            text: 'Remove',\n            align: 'center'\n          }\n        ],\n      }\n    },\n    methods: {\n      async invite() {\n        try {\n          this.error = null\n          const areAllFieldsFilledIn = Object\n            .keys(this.invitation)\n            .every(key => !!this.invitation[key])\n          if (!areAllFieldsFilledIn) {\n            this.error = 'Please fill all the required fields'\n            return\n          }\n          const response = await LibraryService.invite({\n            usernameInviter: this.$store.state.user.username,\n            emailInvited: this.invitation.email,\n            libraryId: this.$store.state.library.id\n          })\n          this.color = \"success\"\n          this.snackbarError = false\n          this.snackbarSuccess = true\n          this.snackbarMessage = 'Invitation sent'\n          this.snackbar= true\n          this.dialog = false\n\n        } catch (error) {\n          alert('Some error happened. Please try again.')\n          this.color = \"error\"\n          this.snackbarSuccess = false\n          this.snackbarError = true\n          this.snackbarMessage = \"Some error happened. Please try again later.\"\n          this.snackbar= true\n          this.dialog = false\n        }\n      },\n      async deleteItem (item) {\n        const index = this.users.indexOf(item)\n\n        if (response) {\n          var r = confirm(`Are you sure you want to delete @${item.username} from your library?`) && this.users.splice(index, 1)\n          if (r) {\n            const response = (await LibraryService.removeUserFromLibrary(this.$store.state.library.id, item.userId)).data\n            this.color = \"success\"\n            this.snackbarError = false\n            this.snackbarSuccess = true\n            this.snackbarMessage = \"User deleted successfully.\"\n            this.snackbar= true\n          }\n        }\n      }\n    },\n    async mounted () {\n      const libraryInvitations = (await LibraryService.getAllLibraryInvitationsByLibraryId(this.$store.state.library.id)).data\n          for (var i = 0; i < libraryInvitations.length; i++) {\n            var obj=libraryInvitations[i]\n            const user = (await AuthenticationService.getUserById(obj.UserId)).data\n            this.users.push({\n              userId: user.id,\n              name: user.name,\n              surname: user.surname,\n              username: user.username,\n              birthDate: user.birthDate,\n              email: user.email\n            })\n           }\n      var x = document.getElementsByClassName(\"idcolumn\")\n      x[0].style.display = \"none\"\n    }\n  }\n</script>\n"]}]}