{"remainingRequest":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\nuno_\\Desktop\\q1w2\\client\\src\\views\\YourBooks.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\src\\views\\YourBooks.vue","mtime":1547048577895},{"path":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport PersonalReadingService from '@/services/PersonalReadingService'\nimport BookService from '@/services/BookService'\nimport LibraryService from '@/services/LibraryService'\nexport default {\n  data() {\n    return {\n      dialogReading: false,\n      dialogComment: false,\n      search: '',\n      date: new Date().toISOString().substr(0, 10),\n      modalStart: false,\n      modalEnd: false,\n      editedItem: {\n        title: '',\n        authors: '',\n        reading: '',\n        startDate: '',\n        endDate: ''\n      },\n      headers: [{\n          class: 'idcolumn',\n          sortable: true,\n          text: 'Id',\n          value: 'personalReadingId',\n        },\n        {\n          sortable: false,\n          text: 'Title',\n          value: 'title'\n        },\n        {\n          sortable: false,\n          text: 'Author(s)',\n          value: 'authors'\n        },\n        {\n          sortable: true,\n          text: 'Number of pages',\n          value: 'numberpages'\n        },\n        {\n          sortable: true,\n          text: 'Library',\n          value: 'library'\n        },\n        {\n          sortable: false,\n          text: 'Read status',\n          value: 'reading',\n          align: 'right'\n        },\n        {\n          sortable: false,\n          text: 'Comment',\n          value: 'comment',\n          align: 'right'\n        }\n      ],\n      books: [],\n      optionsRead: ['Not read', 'Finished', 'Reading in progress'],\n      list: {\n        0: false,\n        1: false,\n        2: false\n      },\n      defaultItem: {\n        title: '',\n        authors: '',\n        reading: '',\n        comment: ''\n      },\n      editedIndex: -1\n    }\n  },\n  methods: {\n    complete(index) {\n      this.list[index] = !this.list[index]\n    },\n    editReading(item) {\n      this.editedIndex = this.books.indexOf(item)\n      this.editedItem = Object.assign({}, item)\n      this.dialogReading = true\n    },\n    editComment(item) {\n      this.editedIndex = this.books.indexOf(item)\n      this.editedItem = Object.assign({}, item)\n      this.dialogComment = true\n    },\n    async saveReading() {\n      try {\n        if (this.editedIndex > -1) {\n          let updatedReading = (this.editedItem).reading\n          let reading = null\n          let dateToSend = null\n          let personalReadingId = (this.editedItem).personalReadingId\n          if (updatedReading == 'Not read') {\n            reading = 0\n          } else if (updatedReading.substring(0, 8) == 'Finished') {\n            reading = 1\n            dateToSend = this.date\n            this.editedItem.reading = 'Finished in ' + dateToSend\n          } else if (updatedReading == 'Reading in progress') {\n            reading = 2\n            dateToSend = this.date\n            this.editedItem.reading = 'Started at ' + dateToSend\n          }\n          await PersonalReadingService.updateReading(personalReadingId, reading, dateToSend)\n          Object.assign(this.books[this.editedIndex], this.editedItem)\n        } else {\n          this.books.push(this.editedItem)\n        }\n        this.closeDialogReading()\n      } catch (err) {\n        alert(err)\n      }\n    },\n    async saveComment() {\n      try {\n        if (this.editedIndex > -1) {\n          let updatedComment = (this.editedItem).comment\n          let personalReadingId = (this.editedItem).personalReadingId\n          await PersonalReadingService.updateComment(personalReadingId, updatedComment)\n          Object.assign(this.books[this.editedIndex], this.editedItem)\n        } else {\n          this.books.push(this.editedItem)\n        }\n        this.closeDialogComment()\n      } catch (err) {\n        alert(err)\n      }\n    },\n    closeDialogReading() {\n      this.dialogReading = false\n      setTimeout(() => {\n        this.editedItem = Object.assign({}, this.defaultItem)\n        this.editedIndex = -1\n      }, 300)\n    },\n    closeDialogComment() {\n      this.dialogComment = false\n      setTimeout(() => {\n        this.editedItem = Object.assign({}, this.defaultItem)\n        this.editedIndex = -1\n      }, 300)\n    }\n  },\n  async mounted() {\n\n    //this.findAverages()\n    this.books = []\n    const response = (await PersonalReadingService.getPersonalReadingByLibraryUser(this.$store.state.user.id, 0)).data\n    for (var i = 0; i < response.length; i++) {\n      var obj = response[i]\n      var bookId = obj['BookId']\n      const book = (await BookService.getBookById(bookId)).data\n      let reading = ''\n      if (obj['reading'] == 0) {\n        reading = 'Not read'\n      } else if (obj['reading'] == 1) {\n        reading = 'Finished in ' + obj['endDate']\n      } else if (obj['reading'] == 2) {\n        reading = 'Started in ' + obj['startDate']\n      }\n      this.books.push({\n        personalReadingId: obj['id'],\n        title: book.title,\n        authors: book.authors,\n        numberpages: book.nrPages,\n        library: (await LibraryService.getLibraryById(obj['LibraryId'])).data.name,\n        reading: reading,\n        comment: obj['comment'].substring(0, 25),\n      })\n    }\n    var x = document.getElementsByClassName(\"idcolumn\")\n    x[0].style.display = \"none\"\n  }\n}\n",{"version":3,"sources":["YourBooks.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"YourBooks.vue","sourceRoot":"src\\views","sourcesContent":["<script>\r\n/* eslint-disable */\r\n</script>\r\n\r\n<template>\r\n  <v-container fill-height fluid grid-list-xl>\r\n    <v-layout wrap>\r\n      <!-- search texfield + datatable -->\r\n      <v-flex md12 lg12>\r\n        <material-card color=\"green\" title=\"Your books\" text=\"Manage all the books you have from all librarys you're a member.\">\r\n        <v-text-field v-model=\"search\" append-icon=\"search\" label=\"Search\" single-line style=\"max-width:200px;\" hide-details></v-text-field>\r\n          <v-data-table\r\n            :headers=\"headers\"\r\n            :items=\"books\"\r\n            :search=\"search\"\r\n          >\r\n          \r\n<template slot=\"headerCell\" slot-scope=\"{ header }\">\r\n  <span class=\"font-weight-light text-warning text--darken-3\" v-text=\"header.text\" />\r\n</template>\r\n\r\n<template slot=\"items\" slot-scope=\"props\">\r\n  <td style=\"display:none;\">\r\n    {{ props.item.personalReadingId }}</td>\r\n  <td>{{ props.item.title }}</td>\r\n  <td>{{ props.item.authors }}</td>\r\n  <td>{{ props.item.numberpages }}</td>\r\n  <td>{{ props.item.library }}</td>\r\n  <td>\r\n    <v-icon small @click=\"editReading(props.item)\" color=\"indigo\">edit</v-icon> {{ props.item.reading }}\r\n  </td>\r\n  <td>\r\n    <v-icon small @click=\"editComment(props.item)\" color=\"indigo\">edit</v-icon> {{ props.item.comment }}\r\n  </td>\r\n</template>\r\n          </v-data-table>\r\n        </material-card>\r\n      </v-flex>\r\n    </v-layout>\r\n    <v-dialog v-model=\"dialogReading\" max-width=\"700px\">\r\n          <v-card>\r\n            <v-card-title>\r\n              <span class=\"headline\">Change the read status of {{editedItem.title}}</span>\r\n            </v-card-title>\r\n  \r\n            <v-card-text>\r\n              <v-container grid-list-md>\r\n                <v-layout wrap>\r\n                  <v-flex xs12 sm6 md4>\r\n                    <!-- <v-text-field v-model=\"editedItem.reading\" label=\"Calories\"></v-text-field> -->\r\n                          <v-select v-model=\"editedItem.reading\" v-bind:items=\"this.optionsRead\" label=\"Read status\" ></v-select>\r\n                          <v-dialog ref=\"dialogStart\" v-if=\"editedItem.reading=='Reading in progress'\" v-model=\"modalStart\" :return-value.sync=\"date\" persistent lazy full-width width=\"290px\">\r\n                      <v-text-field slot=\"activator\" v-model=\"date\" label=\"Started in\" prepend-icon=\"event\" readonly></v-text-field>\r\n                      <v-date-picker v-model=\"date\" scrollable>\r\n                        <v-spacer></v-spacer>\r\n                        <v-btn flat color=\"primary\" @click=\"modalStart = false\">Cancel</v-btn>\r\n                        <v-btn flat color=\"primary\" @click=\"$refs.dialogStart.save(date)\">OK</v-btn>\r\n                      </v-date-picker>\r\n                    </v-dialog>\r\n                    <v-dialog ref=\"dialogEnd\" v-if=\"editedItem.reading=='Finished'\" v-model=\"modalEnd\" :return-value.sync=\"date\" persistent lazy full-width width=\"290px\">\r\n                      <v-text-field slot=\"activator\" v-model=\"date\" label=\"Finished in\" prepend-icon=\"event\" readonly></v-text-field>\r\n                      <v-date-picker v-model=\"date\" scrollable>\r\n                        <v-spacer></v-spacer>\r\n                        <v-btn flat color=\"primary\" @click=\"modalEnd = false\">Cancel</v-btn>\r\n                        <v-btn flat color=\"primary\" @click=\"$refs.dialogEnd.save(date)\">OK</v-btn>\r\n                      </v-date-picker>\r\n                    </v-dialog>\r\n                  </v-flex>\r\n                </v-layout>\r\n              </v-container>\r\n            </v-card-text>\r\n            <v-card-actions>\r\n              <v-spacer></v-spacer>\r\n              <v-btn color=\"blue darken-1\" flat @click=\"closeDialogReading\">Cancel</v-btn>\r\n              <v-btn color=\"blue darken-1\" flat @click=\"saveReading\">Save</v-btn>\r\n            </v-card-actions>\r\n          </v-card>\r\n    </v-dialog>\r\n    <v-dialog v-model=\"dialogComment\" max-width=\"900px\">\r\n      <v-card>\r\n        <v-card-title>\r\n          <span class=\"headline\">Comment {{editedItem.title}}</span>\r\n        </v-card-title>\r\n         <v-card-text>\r\n          <v-container grid-list-md>\r\n            <v-layout wrap>\r\n              <v-flex xs12 md12>\r\n                <v-textarea v-model=\"editedItem.comment\" label=\"Comment\"></v-textarea>\r\n              </v-flex>\r\n            </v-layout>\r\n          </v-container>\r\n         </v-card-text>\r\n         <v-card-actions>\r\n          <v-spacer></v-spacer>\r\n          <v-btn color=\"blue darken-1\" flat @click=\"closeDialogComment\">Cancel</v-btn>\r\n          <v-btn color=\"blue darken-1\" flat @click=\"saveComment\">Save</v-btn>\r\n         </v-card-actions>\r\n        </v-card>\r\n        </v-dialog>\r\n  </v-container>\r\n</template>\r\n\r\n<script>\r\n  import PersonalReadingService from '@/services/PersonalReadingService'\r\n  import BookService from '@/services/BookService'\r\n  import LibraryService from '@/services/LibraryService'\r\n  export default {\r\n    data() {\r\n      return {\r\n        dialogReading: false,\r\n        dialogComment: false,\r\n        search: '',\r\n        date: new Date().toISOString().substr(0, 10),\r\n        modalStart: false,\r\n        modalEnd: false,\r\n        editedItem: {\r\n          title: '',\r\n          authors: '',\r\n          reading: '',\r\n          startDate: '',\r\n          endDate: ''\r\n        },\r\n        headers: [{\r\n            class: 'idcolumn',\r\n            sortable: true,\r\n            text: 'Id',\r\n            value: 'personalReadingId',\r\n          },\r\n          {\r\n            sortable: false,\r\n            text: 'Title',\r\n            value: 'title'\r\n          },\r\n          {\r\n            sortable: false,\r\n            text: 'Author(s)',\r\n            value: 'authors'\r\n          },\r\n          {\r\n            sortable: true,\r\n            text: 'Number of pages',\r\n            value: 'numberpages'\r\n          },\r\n          {\r\n            sortable: true,\r\n            text: 'Library',\r\n            value: 'library'\r\n          },\r\n          {\r\n            sortable: false,\r\n            text: 'Read status',\r\n            value: 'reading',\r\n            align: 'right'\r\n          },\r\n          {\r\n            sortable: false,\r\n            text: 'Comment',\r\n            value: 'comment',\r\n            align: 'right'\r\n          }\r\n        ],\r\n        books: [],\r\n        optionsRead: ['Not read', 'Finished', 'Reading in progress'],\r\n        list: {\r\n          0: false,\r\n          1: false,\r\n          2: false\r\n        },\r\n        defaultItem: {\r\n          title: '',\r\n          authors: '',\r\n          reading: '',\r\n          comment: ''\r\n        },\r\n        editedIndex: -1\r\n      }\r\n    },\r\n    methods: {\r\n      complete(index) {\r\n        this.list[index] = !this.list[index]\r\n      },\r\n      editReading(item) {\r\n        this.editedIndex = this.books.indexOf(item)\r\n        this.editedItem = Object.assign({}, item)\r\n        this.dialogReading = true\r\n      },\r\n      editComment(item) {\r\n        this.editedIndex = this.books.indexOf(item)\r\n        this.editedItem = Object.assign({}, item)\r\n        this.dialogComment = true\r\n      },\r\n      async saveReading() {\r\n        try {\r\n          if (this.editedIndex > -1) {\r\n            let updatedReading = (this.editedItem).reading\r\n            let reading = null\r\n            let dateToSend = null\r\n            let personalReadingId = (this.editedItem).personalReadingId\r\n            if (updatedReading == 'Not read') {\r\n              reading = 0\r\n            } else if (updatedReading.substring(0, 8) == 'Finished') {\r\n              reading = 1\r\n              dateToSend = this.date\r\n              this.editedItem.reading = 'Finished in ' + dateToSend\r\n            } else if (updatedReading == 'Reading in progress') {\r\n              reading = 2\r\n              dateToSend = this.date\r\n              this.editedItem.reading = 'Started at ' + dateToSend\r\n            }\r\n            await PersonalReadingService.updateReading(personalReadingId, reading, dateToSend)\r\n            Object.assign(this.books[this.editedIndex], this.editedItem)\r\n          } else {\r\n            this.books.push(this.editedItem)\r\n          }\r\n          this.closeDialogReading()\r\n        } catch (err) {\r\n          alert(err)\r\n        }\r\n      },\r\n      async saveComment() {\r\n        try {\r\n          if (this.editedIndex > -1) {\r\n            let updatedComment = (this.editedItem).comment\r\n            let personalReadingId = (this.editedItem).personalReadingId\r\n            await PersonalReadingService.updateComment(personalReadingId, updatedComment)\r\n            Object.assign(this.books[this.editedIndex], this.editedItem)\r\n          } else {\r\n            this.books.push(this.editedItem)\r\n          }\r\n          this.closeDialogComment()\r\n        } catch (err) {\r\n          alert(err)\r\n        }\r\n      },\r\n      closeDialogReading() {\r\n        this.dialogReading = false\r\n        setTimeout(() => {\r\n          this.editedItem = Object.assign({}, this.defaultItem)\r\n          this.editedIndex = -1\r\n        }, 300)\r\n      },\r\n      closeDialogComment() {\r\n        this.dialogComment = false\r\n        setTimeout(() => {\r\n          this.editedItem = Object.assign({}, this.defaultItem)\r\n          this.editedIndex = -1\r\n        }, 300)\r\n      }\r\n    },\r\n    async mounted() {\r\n\r\n      //this.findAverages()\r\n      this.books = []\r\n      const response = (await PersonalReadingService.getPersonalReadingByLibraryUser(this.$store.state.user.id, 0)).data\r\n      for (var i = 0; i < response.length; i++) {\r\n        var obj = response[i]\r\n        var bookId = obj['BookId']\r\n        const book = (await BookService.getBookById(bookId)).data\r\n        let reading = ''\r\n        if (obj['reading'] == 0) {\r\n          reading = 'Not read'\r\n        } else if (obj['reading'] == 1) {\r\n          reading = 'Finished in ' + obj['endDate']\r\n        } else if (obj['reading'] == 2) {\r\n          reading = 'Started in ' + obj['startDate']\r\n        }\r\n        this.books.push({\r\n          personalReadingId: obj['id'],\r\n          title: book.title,\r\n          authors: book.authors,\r\n          numberpages: book.nrPages,\r\n          library: (await LibraryService.getLibraryById(obj['LibraryId'])).data.name,\r\n          reading: reading,\r\n          comment: obj['comment'].substring(0, 25),\r\n        })\r\n      }\r\n      var x = document.getElementsByClassName(\"idcolumn\")\r\n      x[0].style.display = \"none\"\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n  \r\n</style>\r\n"]}]}