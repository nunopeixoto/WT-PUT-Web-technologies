{"remainingRequest":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\nuno_\\Desktop\\q1w2\\client\\src\\views\\BookManually.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\src\\views\\BookManually.vue","mtime":1547648937169},{"path":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport BookService from '@/services/BookService'\nimport PersonalReadingService from '@/services/PersonalReadingService'\nimport Datepicker from 'vuejs-datepicker'\n\nexport default {\n  name: 'book-manually',\n  components: {\n    Datepicker\n  },\n    data() {\n      return {\n        book: {\n          title: null,\n          subtitle: null,\n          authors: null,\n          publishDate: 'Please fill',\n          nrPages: null,\n          publisher: null,\n          language: null,\n          thumbnailUrl : null\n        },\n        reading: null,\n        optionsReading : ['I already have read this book', 'I haven\\'t started it yet.', 'I\\'ve started but I haven\\'t finshed yet.'],\n        date: null,\n        dateStart: null,\n        dateEnd: null,\n        modal: false,\n        modalStart: null,\n        modalEnd: null,\n        error: null,\n        success: null,\n        dialog: false,\n        dialogStart: false,\n        //datepicker : false,\n        required: (value) => !!value || 'Required.'\n      }\n    },\n    methods: {\n      async createBook() {\n        this.error = null\n        if (!(this.subtitle)){\n          this.book.subtitle = 'No subtitle'\n        }\n        const areAllFieldsFilledIn = Object\n          .keys(this.book)\n          .every(key => !!this.book[key])\n          if (!areAllFieldsFilledIn){\n            this.error= 'Please fill all the required fields'\n            this.dialog = false\n            return\n          }\n        let readingStatus = 0\n        let startDate = null\n        let endDate = null\n        if (this.reading == this.optionsReading[0]){\n          readingStatus = 1\n          startDate = this.dateStart\n          endDate = this.dateEnd\n        } else if (this.reading == this.optionsReading[1]) {\n          readingStatus = 0\n        } else if (this.reading == this.optionsReading[2]) {\n          readingStatus = 2\n          startDate = this.dateStart\n        }\n        alert(readingStatus )\n        try {\n          const responseBook = await BookService.createBook(this.book)\n          let personalReadingResponse = null\n          if (responseBook.data.message){\n            personalReadingResponse = await PersonalReadingService.createPersonalReading({\n            LibraryId : this.$store.state.library.id,\n            UserId : this.$store.state.user.id,\n            BookId : this.$route.params.BookId,\n            reading: readingStatus,\n            startDate: startDate,\n            endDate: endDate\n          })\n          } else {\n          personalReadingResponse = await PersonalReadingService.createPersonalReading({\n            LibraryId : this.$store.state.library.id,\n            UserId : this.$store.state.user.id,\n            BookId : responseBook.data.id,\n            reading: readingStatus,\n            startDate: startDate,\n            endDate: endDate\n          })\n          \n          }\n          this.success = `${this.book.title} added to your library`\n          this.dialog = false\n        } catch (error) {\n          this.success = null\n          this.dialog = false\n          this.error = error.response.data.error\n        }\n      }\n    },\n    rules: {\n      required: (value) => !!value || 'Required.'\n    },\n    watch: {\n      'this.$route.params.book': {\n        immediate: true,\n        async handler(value) {\n          alert(value)\n          alert('hey')\n        // const bookApi = (Buffer.from(this.$route.params.Book, 'base64').toString('ascii'))\n        // const bookJson = JSON.parse(bookApi)\n        // this.book.title = bookJson.title\n        // this.book.subtitle = bookJson.subtitle\n        // this.book.authors =  JSON.stringify(bookJson.authors).replace(/\"/g,'').replace(/\\[/,'').replace(/\\]/, '').replace(/,/,', ')\n        // this.book.publishDate = bookJson.publishedDate.substring(0,10)\n        // this.book.nrPages = bookJson.pageCount\n        // this.book.publisher =bookJson.publisher\n        // this.book.language = bookJson.language\n        // this.book.thumbnailUrl = bookJson.thumbnail\n        }\n      }\n    },\n    async mounted () {\n      alert('tabs'+this.$parent.tabs)\n      if (this.$route.params.BookId){\n        let bookId = this.$route.params.BookId\n        const book = await BookService.getBookById(bookId)\n        this.book.title = book.data.title\n        this.book.subtitle = book.data.subtitle\n        this.book.authors = book.data.authors\n        this.book.publishDate = book.data.publishDate.substring(0,10)\n        this.book.nrPages = book.data.nrPages\n        this.book.publisher = book.data.publisher\n        this.book.language = book.data.language\n        this.book.thumbnailUrl = book.data.thumbnailUrl\n      } else if (this.$route.params.Book){\n        const bookApi = (Buffer.from(this.$route.params.Book, 'base64').toString('ascii'))\n        const bookJson = JSON.parse(bookApi)\n        this.book.title = bookJson.title\n        this.book.subtitle = bookJson.subtitle\n        this.book.authors =  JSON.stringify(bookJson.authors).replace(/\"/g,'').replace(/\\[/,'').replace(/\\]/, '').replace(/,/,', ')\n        this.book.publishDate = bookJson.publishedDate.substring(0,10)\n        this.book.nrPages = bookJson.pageCount\n        this.book.publisher =bookJson.publisher\n        this.book.language = bookJson.language\n        this.book.thumbnailUrl = bookJson.thumbnail\n      }\n    }\n}\n",{"version":3,"sources":["BookManually.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4FA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BookManually.vue","sourceRoot":"src\\views","sourcesContent":["<script>\r\n/* eslint-disable */\r\n</script>\r\n<template>\r\n  <panel title=\"AddBookManuallyPanel\">\r\n    <v-flex xs12 md12>\r\n      <v-text-field label=\"Title\"  required :rules=\"[required]\" v-model=\"book.title\"></v-text-field>\r\n    </v-flex>\r\n    <v-flex xs12 md12>\r\n      <v-text-field label=\"Subtitle\"  v-model=\"book.subtitle\"></v-text-field>\r\n    </v-flex> \r\n    <v-flex xs12 md12>\r\n      <v-text-field label=\"Authors\"  required :rules=\"[required]\" v-model=\"book.authors\"></v-text-field>   \r\n    </v-flex>\r\n    <!-- <v-flex xs12 md12>\r\n        <v-text-field slot=\"beforeCalendarHeader\" v-model=\"book.publishDate\" label=\"Publish date\"  readonly></v-text-field>\r\n        <datepicker v-model=\"book.publishDate\" placeholder=\"Publish date\"></datepicker>\r\n    </v-flex> -->\r\n    <v-flex xs12 sm6 md4>\r\n        <v-dialog ref=\"dialog\" v-model=\"modal\" :return-value.sync=\"date\" persistent lazy full-width width=\"290px\">\r\n          <v-text-field slot=\"activator\"   v-model=\"date\" label=\"Picker in dialog\" prepend-icon=\"event\" readonly>\r\n          </v-text-field>\r\n          <v-date-picker v-model=\"date\" scrollable>\r\n            <v-spacer></v-spacer>\r\n            <v-btn flat color=\"primary\" @click=\"modal = false\">Cancel</v-btn>\r\n            <v-btn flat color=\"primary\" @click=\"$refs.dialog.save(date)\">OK</v-btn>\r\n          </v-date-picker>\r\n        </v-dialog>\r\n      </v-flex>\r\n    <v-flex xs12 md12>\r\n      <v-text-field label=\"Number of pages\" type=\"number\" required :rules=\"[required]\"  v-model=\"book.nrPages\"></v-text-field>\r\n    </v-flex>\r\n    <v-flex xs12 md12>\r\n      <v-text-field label=\"Publisher\"  v-model=\"book.publisher\"></v-text-field>\r\n    </v-flex>\r\n    <v-flex xs12 md12>\r\n      <v-text-field label=\"Language\" required :rules=\"[required]\"  v-model=\"book.language\"></v-text-field>\r\n    </v-flex>\r\n    <v-flex xs12 md12>\r\n      <v-text-field label=\"Thumbnail URL\" required :rules=\"[required]\"  v-model=\"book.thumbnailUrl\"></v-text-field>\r\n    </v-flex>\r\n    <v-flex xs12 ms6 md4>\r\n      <v-select :items=\"optionsReading\" v-model=\"reading\" label=\"Reading status\"></v-select>\r\n      <v-dialog v-if=\"this.reading==this.optionsReading[0] || this.reading==this.optionsReading[2]\" ref=\"dialogStart\" v-model=\"modalStart\" :return-value.sync=\"date\" persistent lazy full-width width=\"290px\">\r\n          <v-text-field slot=\"activator\" v-model=\"dateStart\" label=\"Start date\" prepend-icon=\"event\" readonly>\r\n          </v-text-field>\r\n          <v-date-picker v-model=\"dateStart\" scrollable>\r\n            <v-spacer></v-spacer>\r\n            <v-btn flat color=\"primary\" @click=\"modalStart = false\">Cancel</v-btn>\r\n            <v-btn flat color=\"primary\" @click=\"$refs.dialogStart.save(date)\">OK</v-btn>\r\n          </v-date-picker>\r\n      </v-dialog>\r\n      <v-dialog v-if=\"this.reading==this.optionsReading[0]\" ref=\"dialogEnd\" v-model=\"modalEnd\" :return-value.sync=\"date\" persistent lazy full-width width=\"290px\">\r\n          <v-text-field slot=\"activator\" v-model=\"dateEnd\" label=\"Finish date\" prepend-icon=\"event\" readonly>\r\n          </v-text-field>\r\n          <v-date-picker v-model=\"dateEnd\" scrollable>\r\n            <v-spacer></v-spacer>\r\n            <v-btn flat color=\"primary\" @click=\"modalEnd = false\">Cancel</v-btn>\r\n            <v-btn flat color=\"primary\" @click=\"$refs.dialogEnd.save(date)\">OK</v-btn>\r\n          </v-date-picker>\r\n        </v-dialog>  \r\n    </v-flex>\r\n    <br><br>\r\n    <v-alert outline v-if=\"success\" :value=\"true\" type=\"success\">\r\n      {{success}}.\r\n    </v-alert>\r\n    <v-alert outline  v-if=\"error\" :value=\"true\" type=\"error\">\r\n      {{error}}\r\n    </v-alert>\r\n    <br>\r\n    <v-flex xs12 text-xs-right>\r\n    <v-btn color=\"success\" @click=\"dialog = true\">\r\n      Submit\r\n    </v-btn>\r\n    </v-flex>\r\n    <v-layout row justify-center>\r\n      <v-dialog v-model=\"dialog\" persistent max-width=\"290\">\r\n        <v-card>\r\n          <v-card-title class=\"headline\">Warning</v-card-title>\r\n          <v-card-text>Are you sure you want to add {{book.title}} to your library?</v-card-text>\r\n          <v-card-actions>\r\n            <v-spacer></v-spacer>\r\n            <v-btn color=\"green darken-1\" flat @click=\"createBook\">Yes</v-btn>\r\n            <v-btn color=\"green darken-1\" flat @click=\"dialog = false\">No</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n    </v-layout>\r\n  </panel>\r\n</template>\r\n\r\n<script>\r\n  import BookService from '@/services/BookService'\r\n  import PersonalReadingService from '@/services/PersonalReadingService'\r\n  import Datepicker from 'vuejs-datepicker'\r\n  \r\n  export default {\r\n    name: 'book-manually',\r\n    components: {\r\n      Datepicker\r\n    },\r\n      data() {\r\n        return {\r\n          book: {\r\n            title: null,\r\n            subtitle: null,\r\n            authors: null,\r\n            publishDate: 'Please fill',\r\n            nrPages: null,\r\n            publisher: null,\r\n            language: null,\r\n            thumbnailUrl : null\r\n          },\r\n          reading: null,\r\n          optionsReading : ['I already have read this book', 'I haven\\'t started it yet.', 'I\\'ve started but I haven\\'t finshed yet.'],\r\n          date: null,\r\n          dateStart: null,\r\n          dateEnd: null,\r\n          modal: false,\r\n          modalStart: null,\r\n          modalEnd: null,\r\n          error: null,\r\n          success: null,\r\n          dialog: false,\r\n          dialogStart: false,\r\n          //datepicker : false,\r\n          required: (value) => !!value || 'Required.'\r\n        }\r\n      },\r\n      methods: {\r\n        async createBook() {\r\n          this.error = null\r\n          if (!(this.subtitle)){\r\n            this.book.subtitle = 'No subtitle'\r\n          }\r\n          const areAllFieldsFilledIn = Object\r\n            .keys(this.book)\r\n            .every(key => !!this.book[key])\r\n            if (!areAllFieldsFilledIn){\r\n              this.error= 'Please fill all the required fields'\r\n              this.dialog = false\r\n              return\r\n            }\r\n          let readingStatus = 0\r\n          let startDate = null\r\n          let endDate = null\r\n          if (this.reading == this.optionsReading[0]){\r\n            readingStatus = 1\r\n            startDate = this.dateStart\r\n            endDate = this.dateEnd\r\n          } else if (this.reading == this.optionsReading[1]) {\r\n            readingStatus = 0\r\n          } else if (this.reading == this.optionsReading[2]) {\r\n            readingStatus = 2\r\n            startDate = this.dateStart\r\n          }\r\n          alert(readingStatus )\r\n          try {\r\n            const responseBook = await BookService.createBook(this.book)\r\n            let personalReadingResponse = null\r\n            if (responseBook.data.message){\r\n              personalReadingResponse = await PersonalReadingService.createPersonalReading({\r\n              LibraryId : this.$store.state.library.id,\r\n              UserId : this.$store.state.user.id,\r\n              BookId : this.$route.params.BookId,\r\n              reading: readingStatus,\r\n              startDate: startDate,\r\n              endDate: endDate\r\n            })\r\n            } else {\r\n            personalReadingResponse = await PersonalReadingService.createPersonalReading({\r\n              LibraryId : this.$store.state.library.id,\r\n              UserId : this.$store.state.user.id,\r\n              BookId : responseBook.data.id,\r\n              reading: readingStatus,\r\n              startDate: startDate,\r\n              endDate: endDate\r\n            })\r\n            \r\n            }\r\n            this.success = `${this.book.title} added to your library`\r\n            this.dialog = false\r\n          } catch (error) {\r\n            this.success = null\r\n            this.dialog = false\r\n            this.error = error.response.data.error\r\n          }\r\n        }\r\n      },\r\n      rules: {\r\n        required: (value) => !!value || 'Required.'\r\n      },\r\n      watch: {\r\n        'this.$route.params.book': {\r\n          immediate: true,\r\n          async handler(value) {\r\n            alert(value)\r\n            alert('hey')\r\n          // const bookApi = (Buffer.from(this.$route.params.Book, 'base64').toString('ascii'))\r\n          // const bookJson = JSON.parse(bookApi)\r\n          // this.book.title = bookJson.title\r\n          // this.book.subtitle = bookJson.subtitle\r\n          // this.book.authors =  JSON.stringify(bookJson.authors).replace(/\"/g,'').replace(/\\[/,'').replace(/\\]/, '').replace(/,/,', ')\r\n          // this.book.publishDate = bookJson.publishedDate.substring(0,10)\r\n          // this.book.nrPages = bookJson.pageCount\r\n          // this.book.publisher =bookJson.publisher\r\n          // this.book.language = bookJson.language\r\n          // this.book.thumbnailUrl = bookJson.thumbnail\r\n          }\r\n        }\r\n      },\r\n      async mounted () {\r\n        alert('tabs'+this.$parent.tabs)\r\n        if (this.$route.params.BookId){\r\n          let bookId = this.$route.params.BookId\r\n          const book = await BookService.getBookById(bookId)\r\n          this.book.title = book.data.title\r\n          this.book.subtitle = book.data.subtitle\r\n          this.book.authors = book.data.authors\r\n          this.book.publishDate = book.data.publishDate.substring(0,10)\r\n          this.book.nrPages = book.data.nrPages\r\n          this.book.publisher = book.data.publisher\r\n          this.book.language = book.data.language\r\n          this.book.thumbnailUrl = book.data.thumbnailUrl\r\n        } else if (this.$route.params.Book){\r\n          const bookApi = (Buffer.from(this.$route.params.Book, 'base64').toString('ascii'))\r\n          const bookJson = JSON.parse(bookApi)\r\n          this.book.title = bookJson.title\r\n          this.book.subtitle = bookJson.subtitle\r\n          this.book.authors =  JSON.stringify(bookJson.authors).replace(/\"/g,'').replace(/\\[/,'').replace(/\\]/, '').replace(/,/,', ')\r\n          this.book.publishDate = bookJson.publishedDate.substring(0,10)\r\n          this.book.nrPages = bookJson.pageCount\r\n          this.book.publisher =bookJson.publisher\r\n          this.book.language = bookJson.language\r\n          this.book.thumbnailUrl = bookJson.thumbnail\r\n        }\r\n      }\r\n  }\r\n</script>\r\n\r\n"]}]}