{"remainingRequest":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\nuno_\\Desktop\\q1w2\\client\\src\\views\\Dashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\src\\views\\Dashboard.vue","mtime":1546991656545},{"path":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport PersonalReadingService from '@/services/PersonalReadingService'\nimport BookService from '@/services/BookService'\nimport LibraryService from '@/services/LibraryService'\nexport default {\n  data() {\n    return {\n      lastFinishedBook: {\n        endDate: '',\n        title: ''\n      },\n      dialogReading: false,\n      dialogComment: false,\n      search: '',\n      date: new Date().toISOString().substr(0, 10),\n      modalStart: false,\n      modalEnd: false,\n      editedItem: {\n        title: '',\n        authors: '',\n        reading: '',\n        startDate: '',\n        endDate: ''\n      },\n      // dailySalesChart: {\n      //   data: {\n      //     labels: ['M', 'T', 'W', 'T', 'F', 'S', 'S'],\n      //     series: [\n      //       [12, 17, 7, 17, 23, 18, 38]\n      //     ]\n      //   },\n      //   options: {\n      //     lineSmooth: this.$chartist.Interpolation.cardinal({\n      //       tension: 0\n      //     }),\n      //     low: 0,\n      //     high: 50, // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n      //     chartPadding: {\n      //       top: 0,\n      //       right: 0,\n      //       bottom: 0,\n      //       left: 0\n      //     }\n      //   }\n      // },\n      // dataCompletedTasksChart: {\n      //   data: {\n      //     labels: ['12am', '3pm', '6pm', '9pm', '12pm', '3am', '6am', '9am'],\n      //     series: [\n      //       [230, 750, 450, 300, 280, 240, 200, 190]\n      //     ]\n      //   },\n      //   options: {\n      //     lineSmooth: this.$chartist.Interpolation.cardinal({\n      //       tension: 0\n      //     }),\n      //     low: 0,\n      //     high: 1000, // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n      //     chartPadding: {\n      //       top: 0,\n      //       right: 0,\n      //       bottom: 0,\n      //       left: 0\n      //     }\n      //   }\n      // },\n      // emailsSubscriptionChart: {\n      //   data: {\n      //     labels: ['Ja', 'Fe', 'Ma', 'Ap', 'Mai', 'Ju', 'Jul', 'Au', 'Se', 'Oc', 'No', 'De'],\n      //     series: [\n      //       [542, 443, 320, 780, 553, 453, 326, 434, 568, 610, 756, 895]\n\n      //     ]\n      //   },\n      //   options: {\n      //     axisX: {\n      //       showGrid: false\n      //     },\n      //     low: 0,\n      //     high: 1000,\n      //     chartPadding: {\n      //       top: 0,\n      //       right: 5,\n      //       bottom: 0,\n      //       left: 0\n      //     }\n      //   },\n      //   responsiveOptions: [\n      //     ['screen and (max-width: 640px)', {\n      //       seriesBarDistance: 5,\n      //       axisX: {\n      //         labelInterpolationFnc: function (value) {\n      //           return value[0]\n      //         }\n      //       }\n      //     }]\n      //   ]\n      // },\n      headers: [{\n          class: 'idcolumn',\n          sortable: true,\n          text: 'Id',\n          value: 'personalReadingId',\n        },\n        {\n          sortable: false,\n          text: 'Title',\n          value: 'title'\n        },\n        {\n          sortable: false,\n          text: 'Author(s)',\n          value: 'authors'\n        },\n        {\n          sortable: true,\n          text: 'Number of pages',\n          value: 'numberpages'\n        },\n        {\n          sortable: true,\n          text: 'Library',\n          value: 'library'\n        },\n        {\n          sortable: false,\n          text: 'Read status',\n          value: 'reading',\n          align: 'right'\n        },\n        {\n          sortable: false,\n          text: 'Comment',\n          value: 'comment',\n          align: 'right'\n        }\n      ],\n      books: [],\n      optionsRead: ['Not read', 'Finished', 'Reading in progress'],\n      list: {\n        0: false,\n        1: false,\n        2: false\n      },\n      defaultItem: {\n        title: '',\n        authors: '',\n        reading: '',\n        comment: ''\n      },\n      editedIndex: -1\n    }\n  },\n  methods: {\n    complete(index) {\n      this.list[index] = !this.list[index]\n    },\n    editReading(item) {\n      this.editedIndex = this.books.indexOf(item)\n      this.editedItem = Object.assign({}, item)\n      this.dialogReading = true\n    },\n    editComment(item) {\n      this.editedIndex = this.books.indexOf(item)\n      this.editedItem = Object.assign({}, item)\n      this.dialogComment = true\n    },\n    async saveReading() {\n      try {\n        if (this.editedIndex > -1) {\n          let updatedReading = (this.editedItem).reading\n          let reading = null\n          let dateToSend = null\n          let personalReadingId = (this.editedItem).personalReadingId\n          if (updatedReading == 'Not read') {\n            reading = 0\n          } else if (updatedReading.substring(0, 8) == 'Finished') {\n            reading = 1\n            dateToSend = this.date\n            this.editedItem.reading = 'Finished in ' + dateToSend\n          } else if (updatedReading == 'Reading in progress') {\n            reading = 2\n            dateToSend = this.date\n            this.editedItem.reading = 'Started at ' + dateToSend\n          }\n          await PersonalReadingService.updateReading(personalReadingId, reading, dateToSend)\n          Object.assign(this.books[this.editedIndex], this.editedItem)\n          alert('hey')\n        } else {\n          this.books.push(this.editedItem)\n        }\n        this.closeDialogReading()\n      } catch (err) {\n        alert(err)\n      }\n    },\n    async saveComment() {\n      try {\n        if (this.editedIndex > -1) {\n          let updatedComment = (this.editedItem).comment\n          let personalReadingId = (this.editedItem).personalReadingId\n          await PersonalReadingService.updateComment(personalReadingId, updatedComment)\n          Object.assign(this.books[this.editedIndex], this.editedItem)\n        } else {\n          this.books.push(this.editedItem)\n        }\n        this.closeDialogComment()\n      } catch (err) {\n        alert(err)\n      }\n    },\n    closeDialogReading() {\n      this.dialogReading = false\n      setTimeout(() => {\n        this.editedItem = Object.assign({}, this.defaultItem)\n        this.editedIndex = -1\n      }, 300)\n    },\n    closeDialogComment() {\n      this.dialogComment = false\n      setTimeout(() => {\n        this.editedItem = Object.assign({}, this.defaultItem)\n        this.editedIndex = -1\n      }, 300)\n    },\n    async findLastFinishedBook(){\n      try {\n        const lastFinishedPersonalReading = await PersonalReadingService.findLastFinishedPersonalReading(this.$store.state.user.id)\n        const lastBook = (await BookService.getBookById(lastFinishedPersonalReading.data[0].BookId)).data\n        alert(JSON.stringify(lastBook))\n        this.lastFinishedBook.title = lastBook.title \n        this.lastFinishedBook.endDate = lastFinishedPersonalReading.data[0].endDate\n      } catch (err) {\n        alert(err)\n      }\n    }\n  },\n  async mounted() {\n    this.findLastFinishedBook()\n    this.books = []\n    const response = (await PersonalReadingService.getPersonalReadingByLibraryUser(this.$store.state.user.id, 0)).data\n    for (var i = 0; i < response.length; i++) {\n      var obj = response[i]\n      var bookId = obj['BookId']\n      const book = (await BookService.getBookById(bookId)).data\n      let reading = ''\n      if (obj['reading'] == 0) {\n        reading = 'Not read'\n      } else if (obj['reading'] == 1) {\n        reading = 'Finished in ' + obj['endDate']\n      } else if (obj['reading'] == 2) {\n        reading = 'Started in ' + obj['startDate']\n      }\n      this.books.push({\n        personalReadingId: obj['id'],\n        title: book.title,\n        authors: book.authors,\n        numberpages: book.nrPages,\n        library: (await LibraryService.getLibraryById(obj['LibraryId'])).data.name,\n        reading: reading,\n        comment: obj['comment'].substring(0, 25),\n      })\n    }\n    var x = document.getElementsByClassName(\"idcolumn\")\n    x[0].style.display = \"none\"\n  }\n}\n",{"version":3,"sources":["Dashboard.vue"],"names":[],"mappingsfile":"Dashboard.vue","sourceRoot":"src\\views","sourcesContent":["<script>\n/* eslint-disable */\n</script>\n\n<template>\n  <v-container fill-height fluid grid-list-xl>\n    <v-layout wrap>\n      <!-- <v-flex\n              md12\n              sm12\n              lg4\n            >\n              <material-chart-card\n                :data=\"dailySalesChart.data\"\n                :options=\"dailySalesChart.options\"\n                color=\"info\"\n                type=\"Line\"\n              >\n                <h4 class=\"title font-weight-light\">Daily Sales</h4>\n                <p class=\"category d-inline-flex font-weight-light\">\n                  <v-icon\n                    color=\"green\"\n                    small\n                  >\n                    mdi-arrow-up\n                  </v-icon>\n                  <span class=\"green--text\">55%</span>&nbsp;\n                  increase in today's sales\n                </p>\n      \n                <template slot=\"actions\">\n                  <v-icon\n                    class=\"mr-2\"\n                    small\n                  >\n                    mdi-clock-outline\n                  </v-icon>\n                  <span class=\"caption grey--text font-weight-light\">updated 4 minutes ago</span>\n</template>\n        </material-chart-card>\n      </v-flex>\n      <v-flex\n        md12\n        sm12\n        lg4\n      >\n        <material-chart-card\n          :data=\"emailsSubscriptionChart.data\"\n          :options=\"emailsSubscriptionChart.options\"\n          :responsive-options=\"emailsSubscriptionChart.responsiveOptions\"\n          color=\"red\"\n          type=\"Bar\"\n        >\n          <h4 class=\"title font-weight-light\">Email Subscription</h4>\n          <p class=\"category d-inline-flex font-weight-light\">Last Campaign Performance</p>\n\n<template slot=\"actions\">\n  <v-icon class=\"mr-2\" small>\n    mdi-clock-outline\n  </v-icon>\n  <span class=\"caption grey--text font-weight-light\">updated 10 minutes ago</span>\n</template>\n        </material-chart-card>\n      </v-flex>\n      <v-flex\n        md12\n        sm12\n        lg4\n      >\n        <material-chart-card\n          :data=\"dataCompletedTasksChart.data\"\n          :options=\"dataCompletedTasksChart.options\"\n          color=\"green\"\n          type=\"Line\"\n        >\n          <h3 class=\"title font-weight-light\">Completed Tasks</h3>\n          <p class=\"category d-inline-flex font-weight-light\">Last Last Campaign Performance</p>\n\n<template slot=\"actions\">\n  <v-icon class=\"mr-2\" small>\n    mdi-clock-outline\n  </v-icon>\n  <span class=\"caption grey--text font-weight-light\">campaign sent 26 minutes ago</span>\n</template>\n        </material-chart-card>\n      </v-flex> -->\n      <v-flex sm6 xs12 md6 lg3>\n        <material-stats-card color=\"green\" icon=\"mdi-book\" title=\"Last finished book\" :value=\"this.lastFinishedBook.title\" sub-icon=\"mdi-calendar\" :sub-text=\"this.lastFinishedBook.endDate\"/>\n      </v-flex>\n      <v-flex sm6 xs12 md6 lg3>\n        <material-stats-card color=\"orange\" icon=\"mdi-content-copy\" title=\"Used Space\" value=\"49/50\" small-value=\"GB\" sub-icon=\"mdi-alert\" sub-icon-color=\"error\" sub-text=\"Get More Space...\" sub-text-color=\"text-primary\"/>\n      </v-flex>\n      <v-flex sm6 xs12 md6 lg3>\n        <material-stats-card color=\"red\" icon=\"mdi-information-outline\" title=\"Fixed Issues\" value=\"75\" sub-icon=\"mdi-tag\" sub-text=\"Tracked from Github\"/>\n      </v-flex>\n      <v-flex\n        sm6\n        xs12\n        md6\n        lg3\n      >\n        <material-stats-card\n          color=\"info\"\n          icon=\"mdi-twitter\"\n          title=\"Followers\"\n          value=\"+245\"\n          sub-icon=\"mdi-update\"\n          sub-text=\"Just Updated\"\n        />\n      </v-flex>\n      <v-flex\n        md12\n        lg12\n      >\n        <material-card\n          color=\"green\"\n          title=\"Your books\"\n          text=\"Manage all the books you have from all librarys you're a member.\"\n        >\n        <v-text-field\n          v-model=\"search\"\n          append-icon=\"search\"\n          label=\"Search\"\n          single-line\n          style=\"max-width:200px;\"\n          hide-details\n        ></v-text-field>\n          <v-data-table\n            :headers=\"headers\"\n            :items=\"books\"\n            :search=\"search\"\n          >\n<template slot=\"headerCell\" slot-scope=\"{ header }\">\n  <span class=\"font-weight-light text-warning text--darken-3\" v-text=\"header.text\" />\n</template>\n\n<template slot=\"items\" slot-scope=\"props\">\n  <td style=\"display:none;\">\n    {{ props.item.personalReadingId }}</td>\n  <td>{{ props.item.title }}</td>\n  <td>{{ props.item.authors }}</td>\n  <td>{{ props.item.numberpages }}</td>\n  <td>{{ props.item.library }}</td>\n  <td>\n    <v-icon small @click=\"editReading(props.item)\" color=\"indigo\">edit</v-icon> {{ props.item.reading }}\n  </td>\n  <td>\n    <v-icon small @click=\"editComment(props.item)\" color=\"indigo\">edit</v-icon> {{ props.item.comment }}\n  </td>\n</template>\n          </v-data-table>\n        </material-card>\n      </v-flex>\n    </v-layout>\n    <v-dialog v-model=\"dialogReading\" max-width=\"700px\">\n          <v-card>\n            <v-card-title>\n              <span class=\"headline\">Change the read status of {{editedItem.title}}</span>\n            </v-card-title>\n  \n            <v-card-text>\n              <v-container grid-list-md>\n                <v-layout wrap>\n                  <v-flex xs12 sm6 md4>\n                    <!-- <v-text-field v-model=\"editedItem.reading\" label=\"Calories\"></v-text-field> -->\n                          <v-select v-model=\"editedItem.reading\" v-bind:items=\"this.optionsRead\" label=\"Read status\" ></v-select>\n                          <v-dialog ref=\"dialogStart\" v-if=\"editedItem.reading=='Reading in progress'\" v-model=\"modalStart\" :return-value.sync=\"date\" persistent lazy full-width width=\"290px\">\n                      <v-text-field slot=\"activator\" v-model=\"date\" label=\"Started in\" prepend-icon=\"event\" readonly></v-text-field>\n                      <v-date-picker v-model=\"date\" scrollable>\n                        <v-spacer></v-spacer>\n                        <v-btn flat color=\"primary\" @click=\"modalStart = false\">Cancel</v-btn>\n                        <v-btn flat color=\"primary\" @click=\"$refs.dialogStart.save(date)\">OK</v-btn>\n                      </v-date-picker>\n                    </v-dialog>\n                    <v-dialog ref=\"dialogEnd\" v-if=\"editedItem.reading=='Finished'\" v-model=\"modalEnd\" :return-value.sync=\"date\" persistent lazy full-width width=\"290px\">\n                      <v-text-field slot=\"activator\" v-model=\"date\" label=\"Finished in\" prepend-icon=\"event\" readonly></v-text-field>\n                      <v-date-picker v-model=\"date\" scrollable>\n                        <v-spacer></v-spacer>\n                        <v-btn flat color=\"primary\" @click=\"modalEnd = false\">Cancel</v-btn>\n                        <v-btn flat color=\"primary\" @click=\"$refs.dialogEnd.save(date)\">OK</v-btn>\n                      </v-date-picker>\n                    </v-dialog>\n                  </v-flex>\n                </v-layout>\n              </v-container>\n            </v-card-text>\n            <v-card-actions>\n              <v-spacer></v-spacer>\n              <v-btn color=\"blue darken-1\" flat @click=\"closeDialogReading\">Cancel</v-btn>\n              <v-btn color=\"blue darken-1\" flat @click=\"saveReading\">Save</v-btn>\n            </v-card-actions>\n          </v-card>\n    </v-dialog>\n    <v-dialog v-model=\"dialogComment\" max-width=\"900px\">\n      <v-card>\n        <v-card-title>\n          <span class=\"headline\">Comment {{editedItem.title}}</span>\n        </v-card-title>\n         <v-card-text>\n          <v-container grid-list-md>\n            <v-layout wrap>\n              <v-flex xs12 md12>\n                <v-textarea v-model=\"editedItem.comment\" label=\"Comment\"></v-textarea>\n              </v-flex>\n            </v-layout>\n          </v-container>\n         </v-card-text>\n         <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"blue darken-1\" flat @click=\"closeDialogComment\">Cancel</v-btn>\n          <v-btn color=\"blue darken-1\" flat @click=\"saveComment\">Save</v-btn>\n         </v-card-actions>\n        </v-card>\n        </v-dialog>\n  </v-container>\n</template>\n\n<script>\n  import PersonalReadingService from '@/services/PersonalReadingService'\n  import BookService from '@/services/BookService'\n  import LibraryService from '@/services/LibraryService'\n  export default {\n    data() {\n      return {\n        lastFinishedBook: {\n          endDate: '',\n          title: ''\n        },\n        dialogReading: false,\n        dialogComment: false,\n        search: '',\n        date: new Date().toISOString().substr(0, 10),\n        modalStart: false,\n        modalEnd: false,\n        editedItem: {\n          title: '',\n          authors: '',\n          reading: '',\n          startDate: '',\n          endDate: ''\n        },\n        // dailySalesChart: {\n        //   data: {\n        //     labels: ['M', 'T', 'W', 'T', 'F', 'S', 'S'],\n        //     series: [\n        //       [12, 17, 7, 17, 23, 18, 38]\n        //     ]\n        //   },\n        //   options: {\n        //     lineSmooth: this.$chartist.Interpolation.cardinal({\n        //       tension: 0\n        //     }),\n        //     low: 0,\n        //     high: 50, // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n        //     chartPadding: {\n        //       top: 0,\n        //       right: 0,\n        //       bottom: 0,\n        //       left: 0\n        //     }\n        //   }\n        // },\n        // dataCompletedTasksChart: {\n        //   data: {\n        //     labels: ['12am', '3pm', '6pm', '9pm', '12pm', '3am', '6am', '9am'],\n        //     series: [\n        //       [230, 750, 450, 300, 280, 240, 200, 190]\n        //     ]\n        //   },\n        //   options: {\n        //     lineSmooth: this.$chartist.Interpolation.cardinal({\n        //       tension: 0\n        //     }),\n        //     low: 0,\n        //     high: 1000, // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n        //     chartPadding: {\n        //       top: 0,\n        //       right: 0,\n        //       bottom: 0,\n        //       left: 0\n        //     }\n        //   }\n        // },\n        // emailsSubscriptionChart: {\n        //   data: {\n        //     labels: ['Ja', 'Fe', 'Ma', 'Ap', 'Mai', 'Ju', 'Jul', 'Au', 'Se', 'Oc', 'No', 'De'],\n        //     series: [\n        //       [542, 443, 320, 780, 553, 453, 326, 434, 568, 610, 756, 895]\n  \n        //     ]\n        //   },\n        //   options: {\n        //     axisX: {\n        //       showGrid: false\n        //     },\n        //     low: 0,\n        //     high: 1000,\n        //     chartPadding: {\n        //       top: 0,\n        //       right: 5,\n        //       bottom: 0,\n        //       left: 0\n        //     }\n        //   },\n        //   responsiveOptions: [\n        //     ['screen and (max-width: 640px)', {\n        //       seriesBarDistance: 5,\n        //       axisX: {\n        //         labelInterpolationFnc: function (value) {\n        //           return value[0]\n        //         }\n        //       }\n        //     }]\n        //   ]\n        // },\n        headers: [{\n            class: 'idcolumn',\n            sortable: true,\n            text: 'Id',\n            value: 'personalReadingId',\n          },\n          {\n            sortable: false,\n            text: 'Title',\n            value: 'title'\n          },\n          {\n            sortable: false,\n            text: 'Author(s)',\n            value: 'authors'\n          },\n          {\n            sortable: true,\n            text: 'Number of pages',\n            value: 'numberpages'\n          },\n          {\n            sortable: true,\n            text: 'Library',\n            value: 'library'\n          },\n          {\n            sortable: false,\n            text: 'Read status',\n            value: 'reading',\n            align: 'right'\n          },\n          {\n            sortable: false,\n            text: 'Comment',\n            value: 'comment',\n            align: 'right'\n          }\n        ],\n        books: [],\n        optionsRead: ['Not read', 'Finished', 'Reading in progress'],\n        list: {\n          0: false,\n          1: false,\n          2: false\n        },\n        defaultItem: {\n          title: '',\n          authors: '',\n          reading: '',\n          comment: ''\n        },\n        editedIndex: -1\n      }\n    },\n    methods: {\n      complete(index) {\n        this.list[index] = !this.list[index]\n      },\n      editReading(item) {\n        this.editedIndex = this.books.indexOf(item)\n        this.editedItem = Object.assign({}, item)\n        this.dialogReading = true\n      },\n      editComment(item) {\n        this.editedIndex = this.books.indexOf(item)\n        this.editedItem = Object.assign({}, item)\n        this.dialogComment = true\n      },\n      async saveReading() {\n        try {\n          if (this.editedIndex > -1) {\n            let updatedReading = (this.editedItem).reading\n            let reading = null\n            let dateToSend = null\n            let personalReadingId = (this.editedItem).personalReadingId\n            if (updatedReading == 'Not read') {\n              reading = 0\n            } else if (updatedReading.substring(0, 8) == 'Finished') {\n              reading = 1\n              dateToSend = this.date\n              this.editedItem.reading = 'Finished in ' + dateToSend\n            } else if (updatedReading == 'Reading in progress') {\n              reading = 2\n              dateToSend = this.date\n              this.editedItem.reading = 'Started at ' + dateToSend\n            }\n            await PersonalReadingService.updateReading(personalReadingId, reading, dateToSend)\n            Object.assign(this.books[this.editedIndex], this.editedItem)\n            alert('hey')\n          } else {\n            this.books.push(this.editedItem)\n          }\n          this.closeDialogReading()\n        } catch (err) {\n          alert(err)\n        }\n      },\n      async saveComment() {\n        try {\n          if (this.editedIndex > -1) {\n            let updatedComment = (this.editedItem).comment\n            let personalReadingId = (this.editedItem).personalReadingId\n            await PersonalReadingService.updateComment(personalReadingId, updatedComment)\n            Object.assign(this.books[this.editedIndex], this.editedItem)\n          } else {\n            this.books.push(this.editedItem)\n          }\n          this.closeDialogComment()\n        } catch (err) {\n          alert(err)\n        }\n      },\n      closeDialogReading() {\n        this.dialogReading = false\n        setTimeout(() => {\n          this.editedItem = Object.assign({}, this.defaultItem)\n          this.editedIndex = -1\n        }, 300)\n      },\n      closeDialogComment() {\n        this.dialogComment = false\n        setTimeout(() => {\n          this.editedItem = Object.assign({}, this.defaultItem)\n          this.editedIndex = -1\n        }, 300)\n      },\n      async findLastFinishedBook(){\n        try {\n          const lastFinishedPersonalReading = await PersonalReadingService.findLastFinishedPersonalReading(this.$store.state.user.id)\n          const lastBook = (await BookService.getBookById(lastFinishedPersonalReading.data[0].BookId)).data\n          alert(JSON.stringify(lastBook))\n          this.lastFinishedBook.title = lastBook.title \n          this.lastFinishedBook.endDate = lastFinishedPersonalReading.data[0].endDate\n        } catch (err) {\n          alert(err)\n        }\n      }\n    },\n    async mounted() {\n      this.findLastFinishedBook()\n      this.books = []\n      const response = (await PersonalReadingService.getPersonalReadingByLibraryUser(this.$store.state.user.id, 0)).data\n      for (var i = 0; i < response.length; i++) {\n        var obj = response[i]\n        var bookId = obj['BookId']\n        const book = (await BookService.getBookById(bookId)).data\n        let reading = ''\n        if (obj['reading'] == 0) {\n          reading = 'Not read'\n        } else if (obj['reading'] == 1) {\n          reading = 'Finished in ' + obj['endDate']\n        } else if (obj['reading'] == 2) {\n          reading = 'Started in ' + obj['startDate']\n        }\n        this.books.push({\n          personalReadingId: obj['id'],\n          title: book.title,\n          authors: book.authors,\n          numberpages: book.nrPages,\n          library: (await LibraryService.getLibraryById(obj['LibraryId'])).data.name,\n          reading: reading,\n          comment: obj['comment'].substring(0, 25),\n        })\n      }\n      var x = document.getElementsByClassName(\"idcolumn\")\n      x[0].style.display = \"none\"\n    }\n  }\n</script>\n\n<style scoped>\n  \n</style>\n"]}]}