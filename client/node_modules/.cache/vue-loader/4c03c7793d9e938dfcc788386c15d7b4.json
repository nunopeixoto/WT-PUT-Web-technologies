{"remainingRequest":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\nuno_\\Desktop\\q1w2\\client\\src\\views\\Dashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\src\\views\\Dashboard.vue","mtime":1548158832507},{"path":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\nuno_\\Desktop\\q1w2\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport PersonalReadingService from '@/services/PersonalReadingService'\nimport BookService from '@/services/BookService'\nimport LoanService from '@/services/LoanService'\nimport LibraryService from '@/services/LibraryService'\nimport AuthenticationService from '@/services/AuthenticationService'\nexport default {\n  data() {\n    return {\n      snackbar: false,\n      top:true,\n      averageBooksCard: {\n        averagePagesMonth: '',\n        averagePagesDay: '',\n      },\n      lastFinishedBook: {\n        endDate: '',\n        title: '',\n        titleComplete: ''\n      },\n      currentlyReadingCard: {\n        bookName: '',\n        bookNameComplete: '',\n        libraryName: ''\n      },\n      booksReadFromLibrariesCard : {\n        valueText: null,\n        subtext: null,\n      },\n      dialogReading: false,\n      dialogComment: false,\n      search: '',\n      date: new Date().toISOString().substr(0, 10),\n      modalStart: false,\n      modalEnd: false,\n      editedItem: {\n        title: '',\n        authors: '',\n        reading: '',\n        startDate: '',\n        endDate: ''\n      },\n      dailySalesChart: {\n        data: {\n          labels: ['M', 'T', 'W', 'T', 'F', 'S', 'S'],\n          series: [[542, 443, 320, 780, 553, 453, 326, 434, 568, 610, 756, 895]]\n        },\n        options: {\n          lineSmooth: this.$chartist.Interpolation.cardinal({\n            tension: 0\n          }),\n          low: 0,\n          high: 50, // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n          chartPadding: {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n          }\n        }\n      },\n      dataCompletedTasksChart: {\n        data: {\n          labels: ['12am', '3pm', '6pm', '9pm', '12pm', '3am', '6am', '9am'],\n          series: [\n            [230, 750, 450, 300, 280, 240, 200, 190]\n          ]\n        },\n        options: {\n          lineSmooth: this.$chartist.Interpolation.cardinal({\n            tension: 0\n          }),\n          low: 0,\n          high: 1000, // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n          chartPadding: {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n          }\n        }\n      },\n      emailsSubscriptionChart: {\n        data: {\n          labels: ['Ja', 'Fe', 'Ma', 'Ap', 'Mai', 'Ju', 'Jul', 'Au', 'Se', 'Oc', 'No', 'De'],\n          series: []\n        },\n        options: {\n          axisX: {\n            showGrid: false\n          },\n          low: 0,\n          high: 1000,\n          chartPadding: {\n            top: 0,\n            right: 5,\n            bottom: 0,\n            left: 0\n          }\n        },\n        responsiveOptions: [\n          ['screen and (max-width: 640px)', {\n            seriesBarDistance: 5,\n            axisX: {\n              labelInterpolationFnc: function (value) {\n                return value[0]\n              }\n            }\n          }]\n        ]\n    },\n      headers: [{\n          class: 'idcolumn',\n          sortable: true,\n          text: 'Id',\n          value: 'loanId',\n        },\n        {\n          sortable: false,\n          text: 'Book',\n          value: 'booktitle'\n        },\n        {\n          sortable: false,\n          text: 'From',\n          value: 'from'\n        },\n        {\n          sortable: true,\n          text: 'To',\n          value: 'to'\n        },\n        {\n          sortable: true,\n          text: 'Start date',\n          value: 'startDate'\n        }\n      ],\n      activeLoans: [],\n      list: {\n        0: false,\n        1: false,\n        2: false\n      },\n      defaultItem: {\n        title: '',\n        authors: '',\n        reading: '',\n        comment: ''\n      },\n      editedIndex: -1\n    }\n  },\n  methods: {\n    complete(index) {\n      this.list[index] = !this.list[index]\n    },\n    editReading(item) {\n      this.editedIndex = this.books.indexOf(item)\n      this.editedItem = Object.assign({}, item)\n      this.dialogReading = true\n    },\n    editComment(item) {\n      this.editedIndex = this.books.indexOf(item)\n      this.editedItem = Object.assign({}, item)\n      this.dialogComment = true\n    },\n    async saveReading() {\n      try {\n        if (this.editedIndex > -1) {\n          let updatedReading = (this.editedItem).reading\n          let reading = null\n          let dateToSend = null\n          let personalReadingId = (this.editedItem).personalReadingId\n          if (updatedReading == 'Not read') {\n            reading = 0\n          } else if (updatedReading.substring(0, 8) == 'Finished') {\n            reading = 1\n            dateToSend = this.date\n            this.editedItem.reading = 'Finished in ' + dateToSend\n          } else if (updatedReading == 'Reading in progress') {\n            reading = 2\n            dateToSend = this.date\n            this.editedItem.reading = 'Started at ' + dateToSend\n          }\n          await PersonalReadingService.updateReading(personalReadingId, reading, dateToSend)\n          Object.assign(this.books[this.editedIndex], this.editedItem)\n        } else {\n          this.books.push(this.editedItem)\n        }\n        this.closeDialogReading()\n      } catch (err) {\n        alert(err)\n      }\n    },\n    async saveComment() {\n      try {\n        if (this.editedIndex > -1) {\n          let updatedComment = (this.editedItem).comment\n          let personalReadingId = (this.editedItem).personalReadingId\n          await PersonalReadingService.updateComment(personalReadingId, updatedComment)\n          Object.assign(this.books[this.editedIndex], this.editedItem)\n        } else {\n          this.books.push(this.editedItem)\n        }\n        this.closeDialogComment()\n      } catch (err) {\n        alert(err)\n      }\n    },\n    closeDialogReading() {\n      this.dialogReading = false\n      setTimeout(() => {\n        this.editedItem = Object.assign({}, this.defaultItem)\n        this.editedIndex = -1\n      }, 300)\n    },\n    closeDialogComment() {\n      this.dialogComment = false\n      setTimeout(() => {\n        this.editedItem = Object.assign({}, this.defaultItem)\n        this.editedIndex = -1\n      }, 300)\n    },\n    async findLastFinishedBook(){\n      try {\n          const lastFinishedPersonalReading = await PersonalReadingService.findLastFinishedPersonalReading(this.$store.state.user.id)\n          if (lastFinishedPersonalReading.data.length==1){\n          const lastBook = (await BookService.getBookById(lastFinishedPersonalReading.data[0].BookId)).data\n          this.lastFinishedBook.titleComplete = lastBook.title\n          let bookTitle = null\n          if(lastBook.title.length > 24){\n            bookTitle = lastBook.title.substring(0,20) +'...'\n          } else {\n            bookTitle = lastBook.title\n          }\n          this.lastFinishedBook.title = bookTitle\n          this.lastFinishedBook.endDate = 'Finished in ' +lastFinishedPersonalReading.data[0].endDate\n        } else {\n          this.lastFinishedBook.title = 'No finished book.'\n          this.lastFinishedBook.endDate = 'None'\n        }\n      } catch (err) {\n       \n       alert(err)\n      }\n    },\n    async findCurrentlyReadingBook(){\n      try {\n        const currentlyReadingPersonalReading = await PersonalReadingService.findCurrentlyReadingPersonalReading(this.$store.state.user.id)\n        if (currentlyReadingPersonalReading.data.length==1){\n          const currentBook = (await BookService.getBookById(currentlyReadingPersonalReading.data[0].BookId)).data\n          const currentLibrary = (await LibraryService.getLibraryById(currentlyReadingPersonalReading.data[0].LibraryId)).data \n          this.currentlyReadingCard.bookNameComplete = currentBook.title\n          let BookName = null\n          if(currentBook.title.length > 24) {\n            BookName = currentBook.title.substring(0, 19) + '...'\n          } else {\n            BookName = currentBook.title\n          }\n          this.currentlyReadingCard.bookName =  BookName\n          this.currentlyReadingCard.libraryName = 'From ' +currentLibrary.name\n        } else {\n          this.currentlyReadingCard.bookName =  'None'\n          this.currentlyReadingCard.libraryName = 'None'\n        }\n      } catch (err) {\n        alert(err)\n      }\n    },\n    async findBooksReadFromLibraries(){\n      try {\n        const booksReadFromLibraries = (await PersonalReadingService.findBooksReadFromLibraries(this.$store.state.user.id)).data\n        let booksRead = booksReadFromLibraries.booksRead\n        let totalBooks = booksReadFromLibraries.totalBooks\n        let percentage = Math.round((booksRead / totalBooks ) * 100)\n        this.booksReadFromLibrariesCard.valueText= booksRead+'/'+totalBooks\n        this.booksReadFromLibrariesCard.subtext = `It looks like you've read ${percentage}% of your books.`\n      } catch (err) {\n        alert(err)\n      }\n    },\n    async findAverages(){\n      try {\n        const averages = (await PersonalReadingService.findAverages(this.$store.state.user.id)).data\n        this.averageBooksCard.averagePagesDay = averages.averagePagesDay+''\n        this.averageBooksCard.averagePagesMonth = `Which means you've been reading ${averages.averagePagesMonth} pages per month.`\n        \n      } catch (err) {\n        alert(err)\n      }\n    },\n    async getNumberBooksFinishedByMonth() {\n      let arr = [542, 443, 320, 780, 553, 453, 326, 434, 568, 610, 756, 895]\n      const response = await PersonalReadingService.getNumberBooksFinishedByMonth(this.$store.state.user.id)\n      alert(JSON.stringify(response.data))\n      this.emailsSubscriptionChart.data.series.push(arr)\n    }\n  },\n  beforeRouteEnter (to, from, next) {\n    next(vm => {\n      if (from.path === '/login') {\n        vm.snackbar=true\n      } else {\n        vm.snackbar = false\n      }\n\n      next()\n    })\n  }, \n  async mounted() {\n    this.findLastFinishedBook()\n    this.findCurrentlyReadingBook()\n    this.findBooksReadFromLibraries()\n    this.findAverages()\n    this.getNumberBooksFinishedByMonth()\n    this.activeLoans = []\n    const response = (await LoanService.getLoansByUserId(this.$store.state.user.id, 0)).data\n    for (var i = 0; i < response.length; i++) {\n      var obj = response[i]\n      if (obj['ExternalBookId'] == null) {\n        var personalReading = (await PersonalReadingService.getPersonalReadingById(obj['PersonalReadingId'])).data\n        var bookId = personalReading.BookId\n        const book = (await BookService.getBookById(bookId)).data\n        var from = (await AuthenticationService.getUserById(obj['UserLenterId'])).data\n        var to = (await AuthenticationService.getUserById(obj['UserBorrowerId'])).data\n        var toUsername = ''\n        if (obj['UserBorrowerId'] == null ) {\n          toUsername = obj['status'].substring(8, obj['status'].length)\n        } else {\n          toUsername = '@'+to.username\n        }\n        var startDate = obj['startDate']\n        this.activeLoans.push({\n          loanId: obj['id'],\n          bookTitle: book.title,\n          from: '@'+from.username,\n          to: toUsername,\n          startDate: startDate.substring(0,10)\n        })\n      } else {\n        const book = (await BookService.getBookById(obj['ExternalBookId'])).data\n        var from = obj['status'].substring(10, obj['status'].length)\n        var to = '@'+this.$store.state.user.username\n        var startDate = obj['startDate']\n        this.activeLoans.push({\n          loanId: obj['id'],\n          bookTitle: book.title,\n          from: from,\n          to: to,\n          startDate: startDate.substring(0,10)\n        })\n      }\n    }\n    var x = document.getElementsByClassName(\"idcolumn\")\n    x[0].style.display = \"none\"\n  }\n}\n",{"version":3,"sources":["Dashboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"Dashboard.vue","sourceRoot":"src\\views","sourcesContent":["<script>\n/* eslint-disable */\n</script>\n\n<template>\n  <v-container fill-height fluid grid-list-xl>\n    <v-layout wrap>\n      <v-snackbar color=\"success\"  :top=\"top\" v-model=\"snackbar\" dark>\n        <!-- <v-icon color=\"white\" class=\"mr-3\">mdi-check</v-icon> -->\n        <div>Hello <b>@{{this.$store.state.user.username}}</b>! Welcome to myLibrary app. </div>\n        <v-icon size=\"16\" @click=\"snackbar = false\">mdi-close-circle</v-icon>\n      </v-snackbar>\n      <v-flex\n              md12\n              sm12\n              lg4\n            >\n              <material-chart-card\n                :data=\"dailySalesChart.data\"\n                :options=\"dailySalesChart.options\"\n                color=\"info\"\n                type=\"Line\"\n              >\n                <h4 class=\"title font-weight-light\">Daily Sales</h4>\n                <p class=\"category d-inline-flex font-weight-light\">\n                  <v-icon\n                    color=\"green\"\n                    small\n                  >\n                    mdi-arrow-up\n                  </v-icon>\n                  <span class=\"green--text\">55%</span>&nbsp;\n                  increase in today's sales\n                </p>\n      \n                <template slot=\"actions\">\n                  <v-icon\n                    class=\"mr-2\"\n                    small\n                  >\n                    mdi-clock-outline\n                  </v-icon>\n                  <span class=\"caption grey--text font-weight-light\">updated 4 minutes ago</span>\n</template>\n        </material-chart-card>\n      </v-flex>\n      <v-flex\n        md12\n        sm12\n        lg4\n      >\n        <material-chart-card\n          :data=\"emailsSubscriptionChart.data\"\n          :options=\"emailsSubscriptionChart.options\"\n          :responsive-options=\"emailsSubscriptionChart.responsiveOptions\"\n          color=\"red\"\n          type=\"Bar\"\n        >\n          <h4 class=\"title font-weight-light\">Number of books finished</h4>\n          <p class=\"category d-inline-flex font-weight-light\">Average of all books you've read</p>\n\n<template slot=\"actions\">\n  <v-icon class=\"mr-2\" small>\n    mdi-clock-outline\n  </v-icon>\n  <span class=\"caption grey--text font-weight-light\">updated now</span>\n</template>\n        </material-chart-card>\n      </v-flex>\n      <v-flex\n        md12\n        sm12\n        lg4\n      >\n        <material-chart-card\n          :data=\"dataCompletedTasksChart.data\"\n          :options=\"dataCompletedTasksChart.options\"\n          color=\"green\"\n          type=\"Line\"\n        >\n          <h3 class=\"title font-weight-light\">Completed Tasks</h3>\n          <p class=\"category d-inline-flex font-weight-light\">Last Last Campaign Performance</p>\n\n<template slot=\"actions\">\n  <v-icon class=\"mr-2\" small>\n    mdi-clock-outline\n  </v-icon>\n  <span class=\"caption grey--text font-weight-light\">campaign sent 26 minutes ago</span>\n</template>\n        </material-chart-card>\n      </v-flex> \n      <!-- stats card -->\n      <v-flex sm6 xs12 md6 lg3 >\n        <material-stats-card color=\"info\" icon=\"mdi-book-open\" title=\"Average pages read per day\" :value=\"this.averageBooksCard.averagePagesDay\" sub-icon=\"mdi-update\" :sub-text=\"this.averageBooksCard.averagePagesMonth\"/>\n      </v-flex>\n      <v-flex sm6 xs12 md6 lg3>\n        <material-stats-card color=\"orange\" icon=\"mdi-library\" title=\"Books read from libraries\" :value=\"this.booksReadFromLibrariesCard.valueText\" small-value=\"Books\" sub-icon=\"mdi-read\" :sub-text=\"this.booksReadFromLibrariesCard.subtext\"/>\n      </v-flex>\n      <v-flex sm6 xs12 md6 lg3>\n        <v-tooltip bottom>\n          <material-stats-card slot=\"activator\" color=\"red\" icon=\"mdi-book\" title=\"Currently reading\" :value=\"this.currentlyReadingCard.bookName\" sub-icon=\"mdi-library\" :sub-text=\"this.currentlyReadingCard.libraryName\"/>\n          <span style=\"font-size:20px; color:white;\">{{this.currentlyReadingCard.bookNameComplete}}</span>\n        </v-tooltip>\n      </v-flex>\n      <v-flex sm6 xs12 md6 lg3>\n        <v-tooltip bottom>\n          <material-stats-card slot=\"activator\" color=\"green\" icon=\"mdi-check\" title=\"Last finished book\" :value=\"this.lastFinishedBook.title\" sub-icon=\"mdi-calendar\" :sub-text=\"this.lastFinishedBook.endDate\"/>\n          <span style=\"font-size:20px; color:white;\">{{this.lastFinishedBook.titleComplete}}</span>\n        </v-tooltip>\n      </v-flex>\n      <!-- search texfield + datatable -->\n      <v-flex md12 lg12>\n        <material-card color=\"green\" title=\"Your loans\" text=\"Manage all the loans you're a part of.\">\n        <v-text-field v-model=\"search\" append-icon=\"search\" label=\"Search\" single-line style=\"max-width:200px;\" hide-details></v-text-field>\n          <v-data-table :headers=\"headers\" :items=\"activeLoans\" :search=\"search\"> \n<template slot=\"headerCell\" slot-scope=\"{ header }\">\n  <span class=\"font-weight-light text-warning text--darken-3\" v-text=\"header.text\" />\n</template>\n\n<template slot=\"items\" slot-scope=\"props\">\n  <td style=\"display:none;\">\n    {{ props.item.loanId }}</td>\n  <td>{{ props.item.bookTitle }}</td>\n  <td>{{ props.item.from }}</td>\n  <td>{{ props.item.to }}</td>\n  <td>{{ props.item.startDate }}</td>\n</template>\n          </v-data-table>\n        </material-card>\n      </v-flex>\n    </v-layout>\n  </v-container>\n</template>\n\n<script>\n  import PersonalReadingService from '@/services/PersonalReadingService'\n  import BookService from '@/services/BookService'\n  import LoanService from '@/services/LoanService'\n  import LibraryService from '@/services/LibraryService'\n  import AuthenticationService from '@/services/AuthenticationService'\n  export default {\n    data() {\n      return {\n        snackbar: false,\n        top:true,\n        averageBooksCard: {\n          averagePagesMonth: '',\n          averagePagesDay: '',\n        },\n        lastFinishedBook: {\n          endDate: '',\n          title: '',\n          titleComplete: ''\n        },\n        currentlyReadingCard: {\n          bookName: '',\n          bookNameComplete: '',\n          libraryName: ''\n        },\n        booksReadFromLibrariesCard : {\n          valueText: null,\n          subtext: null,\n        },\n        dialogReading: false,\n        dialogComment: false,\n        search: '',\n        date: new Date().toISOString().substr(0, 10),\n        modalStart: false,\n        modalEnd: false,\n        editedItem: {\n          title: '',\n          authors: '',\n          reading: '',\n          startDate: '',\n          endDate: ''\n        },\n        dailySalesChart: {\n          data: {\n            labels: ['M', 'T', 'W', 'T', 'F', 'S', 'S'],\n            series: [[542, 443, 320, 780, 553, 453, 326, 434, 568, 610, 756, 895]]\n          },\n          options: {\n            lineSmooth: this.$chartist.Interpolation.cardinal({\n              tension: 0\n            }),\n            low: 0,\n            high: 50, // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n            chartPadding: {\n              top: 0,\n              right: 0,\n              bottom: 0,\n              left: 0\n            }\n          }\n        },\n        dataCompletedTasksChart: {\n          data: {\n            labels: ['12am', '3pm', '6pm', '9pm', '12pm', '3am', '6am', '9am'],\n            series: [\n              [230, 750, 450, 300, 280, 240, 200, 190]\n            ]\n          },\n          options: {\n            lineSmooth: this.$chartist.Interpolation.cardinal({\n              tension: 0\n            }),\n            low: 0,\n            high: 1000, // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n            chartPadding: {\n              top: 0,\n              right: 0,\n              bottom: 0,\n              left: 0\n            }\n          }\n        },\n        emailsSubscriptionChart: {\n          data: {\n            labels: ['Ja', 'Fe', 'Ma', 'Ap', 'Mai', 'Ju', 'Jul', 'Au', 'Se', 'Oc', 'No', 'De'],\n            series: []\n          },\n          options: {\n            axisX: {\n              showGrid: false\n            },\n            low: 0,\n            high: 1000,\n            chartPadding: {\n              top: 0,\n              right: 5,\n              bottom: 0,\n              left: 0\n            }\n          },\n          responsiveOptions: [\n            ['screen and (max-width: 640px)', {\n              seriesBarDistance: 5,\n              axisX: {\n                labelInterpolationFnc: function (value) {\n                  return value[0]\n                }\n              }\n            }]\n          ]\n      },\n        headers: [{\n            class: 'idcolumn',\n            sortable: true,\n            text: 'Id',\n            value: 'loanId',\n          },\n          {\n            sortable: false,\n            text: 'Book',\n            value: 'booktitle'\n          },\n          {\n            sortable: false,\n            text: 'From',\n            value: 'from'\n          },\n          {\n            sortable: true,\n            text: 'To',\n            value: 'to'\n          },\n          {\n            sortable: true,\n            text: 'Start date',\n            value: 'startDate'\n          }\n        ],\n        activeLoans: [],\n        list: {\n          0: false,\n          1: false,\n          2: false\n        },\n        defaultItem: {\n          title: '',\n          authors: '',\n          reading: '',\n          comment: ''\n        },\n        editedIndex: -1\n      }\n    },\n    methods: {\n      complete(index) {\n        this.list[index] = !this.list[index]\n      },\n      editReading(item) {\n        this.editedIndex = this.books.indexOf(item)\n        this.editedItem = Object.assign({}, item)\n        this.dialogReading = true\n      },\n      editComment(item) {\n        this.editedIndex = this.books.indexOf(item)\n        this.editedItem = Object.assign({}, item)\n        this.dialogComment = true\n      },\n      async saveReading() {\n        try {\n          if (this.editedIndex > -1) {\n            let updatedReading = (this.editedItem).reading\n            let reading = null\n            let dateToSend = null\n            let personalReadingId = (this.editedItem).personalReadingId\n            if (updatedReading == 'Not read') {\n              reading = 0\n            } else if (updatedReading.substring(0, 8) == 'Finished') {\n              reading = 1\n              dateToSend = this.date\n              this.editedItem.reading = 'Finished in ' + dateToSend\n            } else if (updatedReading == 'Reading in progress') {\n              reading = 2\n              dateToSend = this.date\n              this.editedItem.reading = 'Started at ' + dateToSend\n            }\n            await PersonalReadingService.updateReading(personalReadingId, reading, dateToSend)\n            Object.assign(this.books[this.editedIndex], this.editedItem)\n          } else {\n            this.books.push(this.editedItem)\n          }\n          this.closeDialogReading()\n        } catch (err) {\n          alert(err)\n        }\n      },\n      async saveComment() {\n        try {\n          if (this.editedIndex > -1) {\n            let updatedComment = (this.editedItem).comment\n            let personalReadingId = (this.editedItem).personalReadingId\n            await PersonalReadingService.updateComment(personalReadingId, updatedComment)\n            Object.assign(this.books[this.editedIndex], this.editedItem)\n          } else {\n            this.books.push(this.editedItem)\n          }\n          this.closeDialogComment()\n        } catch (err) {\n          alert(err)\n        }\n      },\n      closeDialogReading() {\n        this.dialogReading = false\n        setTimeout(() => {\n          this.editedItem = Object.assign({}, this.defaultItem)\n          this.editedIndex = -1\n        }, 300)\n      },\n      closeDialogComment() {\n        this.dialogComment = false\n        setTimeout(() => {\n          this.editedItem = Object.assign({}, this.defaultItem)\n          this.editedIndex = -1\n        }, 300)\n      },\n      async findLastFinishedBook(){\n        try {\n            const lastFinishedPersonalReading = await PersonalReadingService.findLastFinishedPersonalReading(this.$store.state.user.id)\n            if (lastFinishedPersonalReading.data.length==1){\n            const lastBook = (await BookService.getBookById(lastFinishedPersonalReading.data[0].BookId)).data\n            this.lastFinishedBook.titleComplete = lastBook.title\n            let bookTitle = null\n            if(lastBook.title.length > 24){\n              bookTitle = lastBook.title.substring(0,20) +'...'\n            } else {\n              bookTitle = lastBook.title\n            }\n            this.lastFinishedBook.title = bookTitle\n            this.lastFinishedBook.endDate = 'Finished in ' +lastFinishedPersonalReading.data[0].endDate\n          } else {\n            this.lastFinishedBook.title = 'No finished book.'\n            this.lastFinishedBook.endDate = 'None'\n          }\n        } catch (err) {\n         \n         alert(err)\n        }\n      },\n      async findCurrentlyReadingBook(){\n        try {\n          const currentlyReadingPersonalReading = await PersonalReadingService.findCurrentlyReadingPersonalReading(this.$store.state.user.id)\n          if (currentlyReadingPersonalReading.data.length==1){\n            const currentBook = (await BookService.getBookById(currentlyReadingPersonalReading.data[0].BookId)).data\n            const currentLibrary = (await LibraryService.getLibraryById(currentlyReadingPersonalReading.data[0].LibraryId)).data \n            this.currentlyReadingCard.bookNameComplete = currentBook.title\n            let BookName = null\n            if(currentBook.title.length > 24) {\n              BookName = currentBook.title.substring(0, 19) + '...'\n            } else {\n              BookName = currentBook.title\n            }\n            this.currentlyReadingCard.bookName =  BookName\n            this.currentlyReadingCard.libraryName = 'From ' +currentLibrary.name\n          } else {\n            this.currentlyReadingCard.bookName =  'None'\n            this.currentlyReadingCard.libraryName = 'None'\n          }\n        } catch (err) {\n          alert(err)\n        }\n      },\n      async findBooksReadFromLibraries(){\n        try {\n          const booksReadFromLibraries = (await PersonalReadingService.findBooksReadFromLibraries(this.$store.state.user.id)).data\n          let booksRead = booksReadFromLibraries.booksRead\n          let totalBooks = booksReadFromLibraries.totalBooks\n          let percentage = Math.round((booksRead / totalBooks ) * 100)\n          this.booksReadFromLibrariesCard.valueText= booksRead+'/'+totalBooks\n          this.booksReadFromLibrariesCard.subtext = `It looks like you've read ${percentage}% of your books.`\n        } catch (err) {\n          alert(err)\n        }\n      },\n      async findAverages(){\n        try {\n          const averages = (await PersonalReadingService.findAverages(this.$store.state.user.id)).data\n          this.averageBooksCard.averagePagesDay = averages.averagePagesDay+''\n          this.averageBooksCard.averagePagesMonth = `Which means you've been reading ${averages.averagePagesMonth} pages per month.`\n          \n        } catch (err) {\n          alert(err)\n        }\n      },\n      async getNumberBooksFinishedByMonth() {\n        let arr = [542, 443, 320, 780, 553, 453, 326, 434, 568, 610, 756, 895]\n        const response = await PersonalReadingService.getNumberBooksFinishedByMonth(this.$store.state.user.id)\n        alert(JSON.stringify(response.data))\n        this.emailsSubscriptionChart.data.series.push(arr)\n      }\n    },\n    beforeRouteEnter (to, from, next) {\n      next(vm => {\n        if (from.path === '/login') {\n          vm.snackbar=true\n        } else {\n          vm.snackbar = false\n        }\n\n        next()\n      })\n    }, \n    async mounted() {\n      this.findLastFinishedBook()\n      this.findCurrentlyReadingBook()\n      this.findBooksReadFromLibraries()\n      this.findAverages()\n      this.getNumberBooksFinishedByMonth()\n      this.activeLoans = []\n      const response = (await LoanService.getLoansByUserId(this.$store.state.user.id, 0)).data\n      for (var i = 0; i < response.length; i++) {\n        var obj = response[i]\n        if (obj['ExternalBookId'] == null) {\n          var personalReading = (await PersonalReadingService.getPersonalReadingById(obj['PersonalReadingId'])).data\n          var bookId = personalReading.BookId\n          const book = (await BookService.getBookById(bookId)).data\n          var from = (await AuthenticationService.getUserById(obj['UserLenterId'])).data\n          var to = (await AuthenticationService.getUserById(obj['UserBorrowerId'])).data\n          var toUsername = ''\n          if (obj['UserBorrowerId'] == null ) {\n            toUsername = obj['status'].substring(8, obj['status'].length)\n          } else {\n            toUsername = '@'+to.username\n          }\n          var startDate = obj['startDate']\n          this.activeLoans.push({\n            loanId: obj['id'],\n            bookTitle: book.title,\n            from: '@'+from.username,\n            to: toUsername,\n            startDate: startDate.substring(0,10)\n          })\n        } else {\n          const book = (await BookService.getBookById(obj['ExternalBookId'])).data\n          var from = obj['status'].substring(10, obj['status'].length)\n          var to = '@'+this.$store.state.user.username\n          var startDate = obj['startDate']\n          this.activeLoans.push({\n            loanId: obj['id'],\n            bookTitle: book.title,\n            from: from,\n            to: to,\n            startDate: startDate.substring(0,10)\n          })\n        }\n      }\n      var x = document.getElementsByClassName(\"idcolumn\")\n      x[0].style.display = \"none\"\n    }\n  }\n</script>\n\n<style scoped>\n  \n</style>\n"]}]}